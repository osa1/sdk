// Copyright (c) 2024, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.
//
// This file has been automatically generated. Please do not edit it manually.
// Generated by tests/ffi/generator/structs_by_value_tests_generator.dart.
//
// SharedObjects=ffi_test_functions
// VMOptions=
// VMOptions=--deterministic --optimization-counter-threshold=90
// VMOptions=--use-slow-path
// VMOptions=--use-slow-path --stacktrace-every=100

import 'dart:ffi';

import 'package:expect/expect.dart';
// ignore: unused_import
import 'package:ffi/ffi.dart';

import 'dylib_utils.dart';

// Reuse the compound classes.
import 'function_structs_by_value_generated_compounds.dart';

final ffiTestFunctions = dlopenPlatformSpecific("ffi_test_functions");
void main() {
  // Force dlopen so @Native lookups in DynamicLibrary.process() succeed.
  dlopenGlobalPlatformSpecific('ffi_test_functions');

  testSizeOfStruct1ByteBoolNativeLeaf();
  testSizeOfStruct1ByteIntNativeLeaf();
  testSizeOfStruct3BytesHomogeneousUint8NativeLeaf();
  testSizeOfStruct3BytesInt2ByteAlignedNativeLeaf();
  testSizeOfStruct4BytesHomogeneousInt16NativeLeaf();
  testSizeOfStruct4BytesFloatNativeLeaf();
  testSizeOfStruct7BytesHomogeneousUint8NativeLeaf();
  testSizeOfStruct7BytesInt4ByteAlignedNativeLeaf();
  testSizeOfStruct8BytesIntNativeLeaf();
  testSizeOfStruct8BytesHomogeneousFloatNativeLeaf();
  testSizeOfStruct8BytesFloatNativeLeaf();
  testSizeOfStruct8BytesMixedNativeLeaf();
  testSizeOfStruct9BytesHomogeneousUint8NativeLeaf();
  testSizeOfStruct9BytesInt4Or8ByteAlignedNativeLeaf();
  testSizeOfStruct10BytesHomogeneousBoolNativeLeaf();
  testSizeOfStruct12BytesHomogeneousFloatNativeLeaf();
  testSizeOfStruct12BytesHomogeneousInt32NativeLeaf();
  testSizeOfStruct16BytesHomogeneousFloatNativeLeaf();
  testSizeOfStruct16BytesMixedNativeLeaf();
  testSizeOfStruct16BytesMixed2NativeLeaf();
  testSizeOfStruct17BytesIntNativeLeaf();
  testSizeOfStruct19BytesHomogeneousUint8NativeLeaf();
  testSizeOfStruct20BytesHomogeneousInt32NativeLeaf();
  testSizeOfStruct20BytesHomogeneousFloatNativeLeaf();
  testSizeOfStruct32BytesHomogeneousDoubleNativeLeaf();
  testSizeOfStruct40BytesHomogeneousDoubleNativeLeaf();
  testSizeOfStruct1024BytesHomogeneousUint64NativeLeaf();
  testSizeOfStructAlignmentInt16NativeLeaf();
  testSizeOfStructAlignmentInt32NativeLeaf();
  testSizeOfStructAlignmentInt64NativeLeaf();
  testSizeOfStruct8BytesNestedIntNativeLeaf();
  testSizeOfStruct8BytesNestedFloatNativeLeaf();
  testSizeOfStruct8BytesNestedFloat2NativeLeaf();
  testSizeOfStruct8BytesNestedMixedNativeLeaf();
  testSizeOfStruct16BytesNestedIntNativeLeaf();
  testSizeOfStruct32BytesNestedIntNativeLeaf();
  testSizeOfStructNestedIntStructAlignmentInt16NativeLeaf();
  testSizeOfStructNestedIntStructAlignmentInt32NativeLeaf();
  testSizeOfStructNestedIntStructAlignmentInt64NativeLeaf();
  testSizeOfStructNestedIrregularBigNativeLeaf();
  testSizeOfStructNestedIrregularBiggerNativeLeaf();
  testSizeOfStructNestedIrregularEvenBiggerNativeLeaf();
  testSizeOfStruct8BytesInlineArrayIntNativeLeaf();
  testSizeOfStruct10BytesInlineArrayBoolNativeLeaf();
  testSizeOfStructInlineArrayIrregularNativeLeaf();
  testSizeOfStructInlineArray100BytesNativeLeaf();
  testSizeOfStructInlineArrayBigNativeLeaf();
  testSizeOfStructStruct16BytesHomogeneousFloat2NativeLeaf();
  testSizeOfStructStruct32BytesHomogeneousDouble2NativeLeaf();
  testSizeOfStructStruct16BytesMixed3NativeLeaf();
  testSizeOfStruct8BytesInlineArrayMultiDimensionalIntNativeLeaf();
  testSizeOfStruct32BytesInlineArrayMultiDimensionalIntNativeLeaf();
  testSizeOfStruct64BytesInlineArrayMultiDimensionalIntNativeLeaf();
  testSizeOfStruct4BytesInlineArrayMultiDimensionalIntNativeLeaf();
  testSizeOfStruct3BytesPackedIntNativeLeaf();
  testSizeOfStruct3BytesPackedIntMembersAlignedNativeLeaf();
  testSizeOfStruct5BytesPackedMixedNativeLeaf();
  testSizeOfStructNestedAlignmentStruct5BytesPackedMixedNativeLeaf();
  testSizeOfStruct6BytesInlineArrayIntNativeLeaf();
  testSizeOfStruct8BytesPackedIntNativeLeaf();
  testSizeOfStruct9BytesPackedMixedNativeLeaf();
  testSizeOfStruct15BytesInlineArrayMixedNativeLeaf();
  testSizeOfUnion4BytesMixedNativeLeaf();
  testSizeOfUnion8BytesNestedFloatNativeLeaf();
  testSizeOfUnion9BytesNestedIntNativeLeaf();
  testSizeOfUnion16BytesNestedInlineArrayFloatNativeLeaf();
  testSizeOfUnion16BytesNestedFloatNativeLeaf();
  testSizeOfStructInlineArrayIntNativeLeaf();
  testSizeOfStructInlineArrayVariableNativeLeaf();
  testSizeOfStructInlineArrayVariableNestedNativeLeaf();
  testSizeOfStructInlineArrayVariableNestedDeepNativeLeaf();
  testSizeOfStructInlineArrayVariableAlignNativeLeaf();
  testSizeOfStructInlineArrayVariable2NativeLeaf();
  testSizeOfStructInlineArrayVariableNested2NativeLeaf();
  testSizeOfStructInlineArrayVariableNestedDeep2NativeLeaf();
}

@Native<Uint64 Function()>(symbol: 'SizeOfStruct1ByteBool', isLeaf: true)
external int sizeOfStruct1ByteBoolNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Struct1ByteBool].
void testSizeOfStruct1ByteBoolNativeLeaf() {
  final result = sizeOfStruct1ByteBoolNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Struct1ByteBool>(), result);
}

@Native<Uint64 Function()>(symbol: 'SizeOfStruct1ByteInt', isLeaf: true)
external int sizeOfStruct1ByteIntNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Struct1ByteInt].
void testSizeOfStruct1ByteIntNativeLeaf() {
  final result = sizeOfStruct1ByteIntNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Struct1ByteInt>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStruct3BytesHomogeneousUint8',
  isLeaf: true,
)
external int sizeOfStruct3BytesHomogeneousUint8NativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Struct3BytesHomogeneousUint8].
void testSizeOfStruct3BytesHomogeneousUint8NativeLeaf() {
  final result = sizeOfStruct3BytesHomogeneousUint8NativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Struct3BytesHomogeneousUint8>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStruct3BytesInt2ByteAligned',
  isLeaf: true,
)
external int sizeOfStruct3BytesInt2ByteAlignedNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Struct3BytesInt2ByteAligned].
void testSizeOfStruct3BytesInt2ByteAlignedNativeLeaf() {
  final result = sizeOfStruct3BytesInt2ByteAlignedNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Struct3BytesInt2ByteAligned>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStruct4BytesHomogeneousInt16',
  isLeaf: true,
)
external int sizeOfStruct4BytesHomogeneousInt16NativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Struct4BytesHomogeneousInt16].
void testSizeOfStruct4BytesHomogeneousInt16NativeLeaf() {
  final result = sizeOfStruct4BytesHomogeneousInt16NativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Struct4BytesHomogeneousInt16>(), result);
}

@Native<Uint64 Function()>(symbol: 'SizeOfStruct4BytesFloat', isLeaf: true)
external int sizeOfStruct4BytesFloatNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Struct4BytesFloat].
void testSizeOfStruct4BytesFloatNativeLeaf() {
  final result = sizeOfStruct4BytesFloatNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Struct4BytesFloat>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStruct7BytesHomogeneousUint8',
  isLeaf: true,
)
external int sizeOfStruct7BytesHomogeneousUint8NativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Struct7BytesHomogeneousUint8].
void testSizeOfStruct7BytesHomogeneousUint8NativeLeaf() {
  final result = sizeOfStruct7BytesHomogeneousUint8NativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Struct7BytesHomogeneousUint8>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStruct7BytesInt4ByteAligned',
  isLeaf: true,
)
external int sizeOfStruct7BytesInt4ByteAlignedNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Struct7BytesInt4ByteAligned].
void testSizeOfStruct7BytesInt4ByteAlignedNativeLeaf() {
  final result = sizeOfStruct7BytesInt4ByteAlignedNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Struct7BytesInt4ByteAligned>(), result);
}

@Native<Uint64 Function()>(symbol: 'SizeOfStruct8BytesInt', isLeaf: true)
external int sizeOfStruct8BytesIntNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Struct8BytesInt].
void testSizeOfStruct8BytesIntNativeLeaf() {
  final result = sizeOfStruct8BytesIntNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Struct8BytesInt>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStruct8BytesHomogeneousFloat',
  isLeaf: true,
)
external int sizeOfStruct8BytesHomogeneousFloatNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Struct8BytesHomogeneousFloat].
void testSizeOfStruct8BytesHomogeneousFloatNativeLeaf() {
  final result = sizeOfStruct8BytesHomogeneousFloatNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Struct8BytesHomogeneousFloat>(), result);
}

@Native<Uint64 Function()>(symbol: 'SizeOfStruct8BytesFloat', isLeaf: true)
external int sizeOfStruct8BytesFloatNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Struct8BytesFloat].
void testSizeOfStruct8BytesFloatNativeLeaf() {
  final result = sizeOfStruct8BytesFloatNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Struct8BytesFloat>(), result);
}

@Native<Uint64 Function()>(symbol: 'SizeOfStruct8BytesMixed', isLeaf: true)
external int sizeOfStruct8BytesMixedNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Struct8BytesMixed].
void testSizeOfStruct8BytesMixedNativeLeaf() {
  final result = sizeOfStruct8BytesMixedNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Struct8BytesMixed>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStruct9BytesHomogeneousUint8',
  isLeaf: true,
)
external int sizeOfStruct9BytesHomogeneousUint8NativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Struct9BytesHomogeneousUint8].
void testSizeOfStruct9BytesHomogeneousUint8NativeLeaf() {
  final result = sizeOfStruct9BytesHomogeneousUint8NativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Struct9BytesHomogeneousUint8>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStruct9BytesInt4Or8ByteAligned',
  isLeaf: true,
)
external int sizeOfStruct9BytesInt4Or8ByteAlignedNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Struct9BytesInt4Or8ByteAligned].
void testSizeOfStruct9BytesInt4Or8ByteAlignedNativeLeaf() {
  final result = sizeOfStruct9BytesInt4Or8ByteAlignedNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Struct9BytesInt4Or8ByteAligned>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStruct10BytesHomogeneousBool',
  isLeaf: true,
)
external int sizeOfStruct10BytesHomogeneousBoolNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Struct10BytesHomogeneousBool].
void testSizeOfStruct10BytesHomogeneousBoolNativeLeaf() {
  final result = sizeOfStruct10BytesHomogeneousBoolNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Struct10BytesHomogeneousBool>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStruct12BytesHomogeneousFloat',
  isLeaf: true,
)
external int sizeOfStruct12BytesHomogeneousFloatNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Struct12BytesHomogeneousFloat].
void testSizeOfStruct12BytesHomogeneousFloatNativeLeaf() {
  final result = sizeOfStruct12BytesHomogeneousFloatNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Struct12BytesHomogeneousFloat>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStruct12BytesHomogeneousInt32',
  isLeaf: true,
)
external int sizeOfStruct12BytesHomogeneousInt32NativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Struct12BytesHomogeneousInt32].
void testSizeOfStruct12BytesHomogeneousInt32NativeLeaf() {
  final result = sizeOfStruct12BytesHomogeneousInt32NativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Struct12BytesHomogeneousInt32>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStruct16BytesHomogeneousFloat',
  isLeaf: true,
)
external int sizeOfStruct16BytesHomogeneousFloatNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Struct16BytesHomogeneousFloat].
void testSizeOfStruct16BytesHomogeneousFloatNativeLeaf() {
  final result = sizeOfStruct16BytesHomogeneousFloatNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Struct16BytesHomogeneousFloat>(), result);
}

@Native<Uint64 Function()>(symbol: 'SizeOfStruct16BytesMixed', isLeaf: true)
external int sizeOfStruct16BytesMixedNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Struct16BytesMixed].
void testSizeOfStruct16BytesMixedNativeLeaf() {
  final result = sizeOfStruct16BytesMixedNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Struct16BytesMixed>(), result);
}

@Native<Uint64 Function()>(symbol: 'SizeOfStruct16BytesMixed2', isLeaf: true)
external int sizeOfStruct16BytesMixed2NativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Struct16BytesMixed2].
void testSizeOfStruct16BytesMixed2NativeLeaf() {
  final result = sizeOfStruct16BytesMixed2NativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Struct16BytesMixed2>(), result);
}

@Native<Uint64 Function()>(symbol: 'SizeOfStruct17BytesInt', isLeaf: true)
external int sizeOfStruct17BytesIntNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Struct17BytesInt].
void testSizeOfStruct17BytesIntNativeLeaf() {
  final result = sizeOfStruct17BytesIntNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Struct17BytesInt>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStruct19BytesHomogeneousUint8',
  isLeaf: true,
)
external int sizeOfStruct19BytesHomogeneousUint8NativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Struct19BytesHomogeneousUint8].
void testSizeOfStruct19BytesHomogeneousUint8NativeLeaf() {
  final result = sizeOfStruct19BytesHomogeneousUint8NativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Struct19BytesHomogeneousUint8>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStruct20BytesHomogeneousInt32',
  isLeaf: true,
)
external int sizeOfStruct20BytesHomogeneousInt32NativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Struct20BytesHomogeneousInt32].
void testSizeOfStruct20BytesHomogeneousInt32NativeLeaf() {
  final result = sizeOfStruct20BytesHomogeneousInt32NativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Struct20BytesHomogeneousInt32>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStruct20BytesHomogeneousFloat',
  isLeaf: true,
)
external int sizeOfStruct20BytesHomogeneousFloatNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Struct20BytesHomogeneousFloat].
void testSizeOfStruct20BytesHomogeneousFloatNativeLeaf() {
  final result = sizeOfStruct20BytesHomogeneousFloatNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Struct20BytesHomogeneousFloat>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStruct32BytesHomogeneousDouble',
  isLeaf: true,
)
external int sizeOfStruct32BytesHomogeneousDoubleNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Struct32BytesHomogeneousDouble].
void testSizeOfStruct32BytesHomogeneousDoubleNativeLeaf() {
  final result = sizeOfStruct32BytesHomogeneousDoubleNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Struct32BytesHomogeneousDouble>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStruct40BytesHomogeneousDouble',
  isLeaf: true,
)
external int sizeOfStruct40BytesHomogeneousDoubleNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Struct40BytesHomogeneousDouble].
void testSizeOfStruct40BytesHomogeneousDoubleNativeLeaf() {
  final result = sizeOfStruct40BytesHomogeneousDoubleNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Struct40BytesHomogeneousDouble>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStruct1024BytesHomogeneousUint64',
  isLeaf: true,
)
external int sizeOfStruct1024BytesHomogeneousUint64NativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Struct1024BytesHomogeneousUint64].
void testSizeOfStruct1024BytesHomogeneousUint64NativeLeaf() {
  final result = sizeOfStruct1024BytesHomogeneousUint64NativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Struct1024BytesHomogeneousUint64>(), result);
}

@Native<Uint64 Function()>(symbol: 'SizeOfStructAlignmentInt16', isLeaf: true)
external int sizeOfStructAlignmentInt16NativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [StructAlignmentInt16].
void testSizeOfStructAlignmentInt16NativeLeaf() {
  final result = sizeOfStructAlignmentInt16NativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<StructAlignmentInt16>(), result);
}

@Native<Uint64 Function()>(symbol: 'SizeOfStructAlignmentInt32', isLeaf: true)
external int sizeOfStructAlignmentInt32NativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [StructAlignmentInt32].
void testSizeOfStructAlignmentInt32NativeLeaf() {
  final result = sizeOfStructAlignmentInt32NativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<StructAlignmentInt32>(), result);
}

@Native<Uint64 Function()>(symbol: 'SizeOfStructAlignmentInt64', isLeaf: true)
external int sizeOfStructAlignmentInt64NativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [StructAlignmentInt64].
void testSizeOfStructAlignmentInt64NativeLeaf() {
  final result = sizeOfStructAlignmentInt64NativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<StructAlignmentInt64>(), result);
}

@Native<Uint64 Function()>(symbol: 'SizeOfStruct8BytesNestedInt', isLeaf: true)
external int sizeOfStruct8BytesNestedIntNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Struct8BytesNestedInt].
void testSizeOfStruct8BytesNestedIntNativeLeaf() {
  final result = sizeOfStruct8BytesNestedIntNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Struct8BytesNestedInt>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStruct8BytesNestedFloat',
  isLeaf: true,
)
external int sizeOfStruct8BytesNestedFloatNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Struct8BytesNestedFloat].
void testSizeOfStruct8BytesNestedFloatNativeLeaf() {
  final result = sizeOfStruct8BytesNestedFloatNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Struct8BytesNestedFloat>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStruct8BytesNestedFloat2',
  isLeaf: true,
)
external int sizeOfStruct8BytesNestedFloat2NativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Struct8BytesNestedFloat2].
void testSizeOfStruct8BytesNestedFloat2NativeLeaf() {
  final result = sizeOfStruct8BytesNestedFloat2NativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Struct8BytesNestedFloat2>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStruct8BytesNestedMixed',
  isLeaf: true,
)
external int sizeOfStruct8BytesNestedMixedNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Struct8BytesNestedMixed].
void testSizeOfStruct8BytesNestedMixedNativeLeaf() {
  final result = sizeOfStruct8BytesNestedMixedNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Struct8BytesNestedMixed>(), result);
}

@Native<Uint64 Function()>(symbol: 'SizeOfStruct16BytesNestedInt', isLeaf: true)
external int sizeOfStruct16BytesNestedIntNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Struct16BytesNestedInt].
void testSizeOfStruct16BytesNestedIntNativeLeaf() {
  final result = sizeOfStruct16BytesNestedIntNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Struct16BytesNestedInt>(), result);
}

@Native<Uint64 Function()>(symbol: 'SizeOfStruct32BytesNestedInt', isLeaf: true)
external int sizeOfStruct32BytesNestedIntNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Struct32BytesNestedInt].
void testSizeOfStruct32BytesNestedIntNativeLeaf() {
  final result = sizeOfStruct32BytesNestedIntNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Struct32BytesNestedInt>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStructNestedIntStructAlignmentInt16',
  isLeaf: true,
)
external int sizeOfStructNestedIntStructAlignmentInt16NativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [StructNestedIntStructAlignmentInt16].
void testSizeOfStructNestedIntStructAlignmentInt16NativeLeaf() {
  final result = sizeOfStructNestedIntStructAlignmentInt16NativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<StructNestedIntStructAlignmentInt16>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStructNestedIntStructAlignmentInt32',
  isLeaf: true,
)
external int sizeOfStructNestedIntStructAlignmentInt32NativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [StructNestedIntStructAlignmentInt32].
void testSizeOfStructNestedIntStructAlignmentInt32NativeLeaf() {
  final result = sizeOfStructNestedIntStructAlignmentInt32NativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<StructNestedIntStructAlignmentInt32>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStructNestedIntStructAlignmentInt64',
  isLeaf: true,
)
external int sizeOfStructNestedIntStructAlignmentInt64NativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [StructNestedIntStructAlignmentInt64].
void testSizeOfStructNestedIntStructAlignmentInt64NativeLeaf() {
  final result = sizeOfStructNestedIntStructAlignmentInt64NativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<StructNestedIntStructAlignmentInt64>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStructNestedIrregularBig',
  isLeaf: true,
)
external int sizeOfStructNestedIrregularBigNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [StructNestedIrregularBig].
void testSizeOfStructNestedIrregularBigNativeLeaf() {
  final result = sizeOfStructNestedIrregularBigNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<StructNestedIrregularBig>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStructNestedIrregularBigger',
  isLeaf: true,
)
external int sizeOfStructNestedIrregularBiggerNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [StructNestedIrregularBigger].
void testSizeOfStructNestedIrregularBiggerNativeLeaf() {
  final result = sizeOfStructNestedIrregularBiggerNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<StructNestedIrregularBigger>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStructNestedIrregularEvenBigger',
  isLeaf: true,
)
external int sizeOfStructNestedIrregularEvenBiggerNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [StructNestedIrregularEvenBigger].
void testSizeOfStructNestedIrregularEvenBiggerNativeLeaf() {
  final result = sizeOfStructNestedIrregularEvenBiggerNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<StructNestedIrregularEvenBigger>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStruct8BytesInlineArrayInt',
  isLeaf: true,
)
external int sizeOfStruct8BytesInlineArrayIntNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Struct8BytesInlineArrayInt].
void testSizeOfStruct8BytesInlineArrayIntNativeLeaf() {
  final result = sizeOfStruct8BytesInlineArrayIntNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Struct8BytesInlineArrayInt>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStruct10BytesInlineArrayBool',
  isLeaf: true,
)
external int sizeOfStruct10BytesInlineArrayBoolNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Struct10BytesInlineArrayBool].
void testSizeOfStruct10BytesInlineArrayBoolNativeLeaf() {
  final result = sizeOfStruct10BytesInlineArrayBoolNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Struct10BytesInlineArrayBool>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStructInlineArrayIrregular',
  isLeaf: true,
)
external int sizeOfStructInlineArrayIrregularNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [StructInlineArrayIrregular].
void testSizeOfStructInlineArrayIrregularNativeLeaf() {
  final result = sizeOfStructInlineArrayIrregularNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<StructInlineArrayIrregular>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStructInlineArray100Bytes',
  isLeaf: true,
)
external int sizeOfStructInlineArray100BytesNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [StructInlineArray100Bytes].
void testSizeOfStructInlineArray100BytesNativeLeaf() {
  final result = sizeOfStructInlineArray100BytesNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<StructInlineArray100Bytes>(), result);
}

@Native<Uint64 Function()>(symbol: 'SizeOfStructInlineArrayBig', isLeaf: true)
external int sizeOfStructInlineArrayBigNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [StructInlineArrayBig].
void testSizeOfStructInlineArrayBigNativeLeaf() {
  final result = sizeOfStructInlineArrayBigNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<StructInlineArrayBig>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStructStruct16BytesHomogeneousFloat2',
  isLeaf: true,
)
external int sizeOfStructStruct16BytesHomogeneousFloat2NativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [StructStruct16BytesHomogeneousFloat2].
void testSizeOfStructStruct16BytesHomogeneousFloat2NativeLeaf() {
  final result = sizeOfStructStruct16BytesHomogeneousFloat2NativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<StructStruct16BytesHomogeneousFloat2>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStructStruct32BytesHomogeneousDouble2',
  isLeaf: true,
)
external int sizeOfStructStruct32BytesHomogeneousDouble2NativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [StructStruct32BytesHomogeneousDouble2].
void testSizeOfStructStruct32BytesHomogeneousDouble2NativeLeaf() {
  final result = sizeOfStructStruct32BytesHomogeneousDouble2NativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<StructStruct32BytesHomogeneousDouble2>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStructStruct16BytesMixed3',
  isLeaf: true,
)
external int sizeOfStructStruct16BytesMixed3NativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [StructStruct16BytesMixed3].
void testSizeOfStructStruct16BytesMixed3NativeLeaf() {
  final result = sizeOfStructStruct16BytesMixed3NativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<StructStruct16BytesMixed3>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStruct8BytesInlineArrayMultiDimensionalInt',
  isLeaf: true,
)
external int sizeOfStruct8BytesInlineArrayMultiDimensionalIntNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Struct8BytesInlineArrayMultiDimensionalInt].
void testSizeOfStruct8BytesInlineArrayMultiDimensionalIntNativeLeaf() {
  final result = sizeOfStruct8BytesInlineArrayMultiDimensionalIntNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Struct8BytesInlineArrayMultiDimensionalInt>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStruct32BytesInlineArrayMultiDimensionalInt',
  isLeaf: true,
)
external int sizeOfStruct32BytesInlineArrayMultiDimensionalIntNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Struct32BytesInlineArrayMultiDimensionalInt].
void testSizeOfStruct32BytesInlineArrayMultiDimensionalIntNativeLeaf() {
  final result = sizeOfStruct32BytesInlineArrayMultiDimensionalIntNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Struct32BytesInlineArrayMultiDimensionalInt>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStruct64BytesInlineArrayMultiDimensionalInt',
  isLeaf: true,
)
external int sizeOfStruct64BytesInlineArrayMultiDimensionalIntNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Struct64BytesInlineArrayMultiDimensionalInt].
void testSizeOfStruct64BytesInlineArrayMultiDimensionalIntNativeLeaf() {
  final result = sizeOfStruct64BytesInlineArrayMultiDimensionalIntNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Struct64BytesInlineArrayMultiDimensionalInt>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStruct4BytesInlineArrayMultiDimensionalInt',
  isLeaf: true,
)
external int sizeOfStruct4BytesInlineArrayMultiDimensionalIntNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Struct4BytesInlineArrayMultiDimensionalInt].
void testSizeOfStruct4BytesInlineArrayMultiDimensionalIntNativeLeaf() {
  final result = sizeOfStruct4BytesInlineArrayMultiDimensionalIntNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Struct4BytesInlineArrayMultiDimensionalInt>(), result);
}

@Native<Uint64 Function()>(symbol: 'SizeOfStruct3BytesPackedInt', isLeaf: true)
external int sizeOfStruct3BytesPackedIntNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Struct3BytesPackedInt].
void testSizeOfStruct3BytesPackedIntNativeLeaf() {
  final result = sizeOfStruct3BytesPackedIntNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Struct3BytesPackedInt>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStruct3BytesPackedIntMembersAligned',
  isLeaf: true,
)
external int sizeOfStruct3BytesPackedIntMembersAlignedNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Struct3BytesPackedIntMembersAligned].
void testSizeOfStruct3BytesPackedIntMembersAlignedNativeLeaf() {
  final result = sizeOfStruct3BytesPackedIntMembersAlignedNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Struct3BytesPackedIntMembersAligned>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStruct5BytesPackedMixed',
  isLeaf: true,
)
external int sizeOfStruct5BytesPackedMixedNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Struct5BytesPackedMixed].
void testSizeOfStruct5BytesPackedMixedNativeLeaf() {
  final result = sizeOfStruct5BytesPackedMixedNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Struct5BytesPackedMixed>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStructNestedAlignmentStruct5BytesPackedMixed',
  isLeaf: true,
)
external int sizeOfStructNestedAlignmentStruct5BytesPackedMixedNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [StructNestedAlignmentStruct5BytesPackedMixed].
void testSizeOfStructNestedAlignmentStruct5BytesPackedMixedNativeLeaf() {
  final result = sizeOfStructNestedAlignmentStruct5BytesPackedMixedNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<StructNestedAlignmentStruct5BytesPackedMixed>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStruct6BytesInlineArrayInt',
  isLeaf: true,
)
external int sizeOfStruct6BytesInlineArrayIntNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Struct6BytesInlineArrayInt].
void testSizeOfStruct6BytesInlineArrayIntNativeLeaf() {
  final result = sizeOfStruct6BytesInlineArrayIntNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Struct6BytesInlineArrayInt>(), result);
}

@Native<Uint64 Function()>(symbol: 'SizeOfStruct8BytesPackedInt', isLeaf: true)
external int sizeOfStruct8BytesPackedIntNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Struct8BytesPackedInt].
void testSizeOfStruct8BytesPackedIntNativeLeaf() {
  final result = sizeOfStruct8BytesPackedIntNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Struct8BytesPackedInt>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStruct9BytesPackedMixed',
  isLeaf: true,
)
external int sizeOfStruct9BytesPackedMixedNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Struct9BytesPackedMixed].
void testSizeOfStruct9BytesPackedMixedNativeLeaf() {
  final result = sizeOfStruct9BytesPackedMixedNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Struct9BytesPackedMixed>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStruct15BytesInlineArrayMixed',
  isLeaf: true,
)
external int sizeOfStruct15BytesInlineArrayMixedNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Struct15BytesInlineArrayMixed].
void testSizeOfStruct15BytesInlineArrayMixedNativeLeaf() {
  final result = sizeOfStruct15BytesInlineArrayMixedNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Struct15BytesInlineArrayMixed>(), result);
}

@Native<Uint64 Function()>(symbol: 'SizeOfUnion4BytesMixed', isLeaf: true)
external int sizeOfUnion4BytesMixedNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Union4BytesMixed].
void testSizeOfUnion4BytesMixedNativeLeaf() {
  final result = sizeOfUnion4BytesMixedNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Union4BytesMixed>(), result);
}

@Native<Uint64 Function()>(symbol: 'SizeOfUnion8BytesNestedFloat', isLeaf: true)
external int sizeOfUnion8BytesNestedFloatNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Union8BytesNestedFloat].
void testSizeOfUnion8BytesNestedFloatNativeLeaf() {
  final result = sizeOfUnion8BytesNestedFloatNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Union8BytesNestedFloat>(), result);
}

@Native<Uint64 Function()>(symbol: 'SizeOfUnion9BytesNestedInt', isLeaf: true)
external int sizeOfUnion9BytesNestedIntNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Union9BytesNestedInt].
void testSizeOfUnion9BytesNestedIntNativeLeaf() {
  final result = sizeOfUnion9BytesNestedIntNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Union9BytesNestedInt>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfUnion16BytesNestedInlineArrayFloat',
  isLeaf: true,
)
external int sizeOfUnion16BytesNestedInlineArrayFloatNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Union16BytesNestedInlineArrayFloat].
void testSizeOfUnion16BytesNestedInlineArrayFloatNativeLeaf() {
  final result = sizeOfUnion16BytesNestedInlineArrayFloatNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Union16BytesNestedInlineArrayFloat>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfUnion16BytesNestedFloat',
  isLeaf: true,
)
external int sizeOfUnion16BytesNestedFloatNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [Union16BytesNestedFloat].
void testSizeOfUnion16BytesNestedFloatNativeLeaf() {
  final result = sizeOfUnion16BytesNestedFloatNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<Union16BytesNestedFloat>(), result);
}

@Native<Uint64 Function()>(symbol: 'SizeOfStructInlineArrayInt', isLeaf: true)
external int sizeOfStructInlineArrayIntNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [StructInlineArrayInt].
void testSizeOfStructInlineArrayIntNativeLeaf() {
  final result = sizeOfStructInlineArrayIntNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<StructInlineArrayInt>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStructInlineArrayVariable',
  isLeaf: true,
)
external int sizeOfStructInlineArrayVariableNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [StructInlineArrayVariable].
void testSizeOfStructInlineArrayVariableNativeLeaf() {
  final result = sizeOfStructInlineArrayVariableNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<StructInlineArrayVariable>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStructInlineArrayVariableNested',
  isLeaf: true,
)
external int sizeOfStructInlineArrayVariableNestedNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [StructInlineArrayVariableNested].
void testSizeOfStructInlineArrayVariableNestedNativeLeaf() {
  final result = sizeOfStructInlineArrayVariableNestedNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<StructInlineArrayVariableNested>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStructInlineArrayVariableNestedDeep',
  isLeaf: true,
)
external int sizeOfStructInlineArrayVariableNestedDeepNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [StructInlineArrayVariableNestedDeep].
void testSizeOfStructInlineArrayVariableNestedDeepNativeLeaf() {
  final result = sizeOfStructInlineArrayVariableNestedDeepNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<StructInlineArrayVariableNestedDeep>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStructInlineArrayVariableAlign',
  isLeaf: true,
)
external int sizeOfStructInlineArrayVariableAlignNativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [StructInlineArrayVariableAlign].
void testSizeOfStructInlineArrayVariableAlignNativeLeaf() {
  final result = sizeOfStructInlineArrayVariableAlignNativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<StructInlineArrayVariableAlign>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStructInlineArrayVariable2',
  isLeaf: true,
)
external int sizeOfStructInlineArrayVariable2NativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [StructInlineArrayVariable2].
void testSizeOfStructInlineArrayVariable2NativeLeaf() {
  final result = sizeOfStructInlineArrayVariable2NativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<StructInlineArrayVariable2>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStructInlineArrayVariableNested2',
  isLeaf: true,
)
external int sizeOfStructInlineArrayVariableNested2NativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [StructInlineArrayVariableNested2].
void testSizeOfStructInlineArrayVariableNested2NativeLeaf() {
  final result = sizeOfStructInlineArrayVariableNested2NativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<StructInlineArrayVariableNested2>(), result);
}

@Native<Uint64 Function()>(
  symbol: 'SizeOfStructInlineArrayVariableNestedDeep2',
  isLeaf: true,
)
external int sizeOfStructInlineArrayVariableNestedDeep2NativeLeaf();

/// Tests that the Dart [sizeOf] returns the same value as the C++ `sizeof` for
/// [StructInlineArrayVariableNestedDeep2].
void testSizeOfStructInlineArrayVariableNestedDeep2NativeLeaf() {
  final result = sizeOfStructInlineArrayVariableNestedDeep2NativeLeaf();

  print("result = $result");

  Expect.equals(sizeOf<StructInlineArrayVariableNestedDeep2>(), result);
}
