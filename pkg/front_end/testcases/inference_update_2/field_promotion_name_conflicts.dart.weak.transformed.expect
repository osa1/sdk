library;
import self as self;
import "dart:core" as core;

part field_promotion_name_conflicts_part.dart;
abstract class C extends core::Object {
  final field core::int? _f1;
  final field core::int? _f2;
  final field core::int? _f3;
  final field core::int? _f4;
  final field core::int? _f5;
  final field core::int? _f6;
  final field core::int? _f7;
  final field core::int? _f8;
  final field core::int? _f9;
  final field core::int? _f10;
  final field core::int? _f11;
  final field core::int? _f12;
  final field core::int? _f13;
  constructor •(core::int? i) → self::C
    : self::C::_f1 = i, self::C::_f2 = i, self::C::_f3 = i, self::C::_f4 = i, self::C::_f5 = i, self::C::_f6 = i, self::C::_f7 = i, self::C::_f8 = i, self::C::_f9 = i, self::C::_f10 = i, self::C::_f11 = i, self::C::_f12 = i, self::C::_f13 = i, super core::Object::•()
    ;
}
abstract class D extends core::Object {
  final field core::int? _f1;
  field core::int? _f2 = null;
  static field core::int? _f6 = null;
  constructor •(core::int? i) → self::D
    : self::D::_f1 = i, super core::Object::•()
    ;
  abstract get _f3() → core::int?;
  get _f4() → core::int?
    return 0;
  set _f5(core::int? i) → void {}
  static get _f7() → core::int?
    return 0;
}
abstract class M extends core::Object /*isMixinDeclaration*/  {
  field core::int? _f12 = null;
  get _f13() → core::int?
    return 0;
}
abstract class E extends core::Object { // from org-dartlang-testcase:///field_promotion_name_conflicts_part.dart
  synthetic constructor •() → self::E
    : super core::Object::•()
    ;
  get _f11() → core::int?
    return 0;
}
extension /* unnamed */ _extension#0 on core::String {
  get _f10 = self::_extension#0|get#_f10;
}
static field core::int? _f8;
static get _f9() → core::int?
  return 0;
static extension-member method _extension#0|get#_f10(lowered final core::String #this) → core::int?
  return 0;
static method acceptsInt(core::int x) → void {}
static method testFinalField(self::C c) → void {
  if(!(c.{self::C::_f1}{core::int?} == null)) {
    core::int x = let core::int? #t1 = c.{self::C::_f1}{core::int?} in #t1 == null ?{core::int} #t1 as{Unchecked} core::int : #t1{core::int};
    self::acceptsInt(x);
  }
}
static method testNonFinalField(self::C c) → void {
  if(!(c.{self::C::_f2}{core::int?} == null)) {
    core::int? x = c.{self::C::_f2}{core::int?};
    x = null;
  }
}
static method testAbstractGetter(self::C c) → void {
  if(!(c.{self::C::_f3}{core::int?} == null)) {
    core::int x = let core::int? #t2 = c.{self::C::_f3}{core::int?} in #t2 == null ?{core::int} #t2 as{Unchecked} core::int : #t2{core::int};
    self::acceptsInt(x);
  }
}
static method testConcreteGetter(self::C c) → void {
  if(!(c.{self::C::_f4}{core::int?} == null)) {
    core::int? x = c.{self::C::_f4}{core::int?};
    x = null;
  }
}
static method testSetter(self::C c) → void {
  if(!(c.{self::C::_f5}{core::int?} == null)) {
    core::int x = let core::int? #t3 = c.{self::C::_f5}{core::int?} in #t3 == null ?{core::int} #t3 as{Unchecked} core::int : #t3{core::int};
    self::acceptsInt(x);
  }
}
static method testStaticField(self::C c) → void {
  if(!(c.{self::C::_f6}{core::int?} == null)) {
    core::int x = let core::int? #t4 = c.{self::C::_f6}{core::int?} in #t4 == null ?{core::int} #t4 as{Unchecked} core::int : #t4{core::int};
    self::acceptsInt(x);
  }
}
static method testStaticGetter(self::C c) → void {
  if(!(c.{self::C::_f7}{core::int?} == null)) {
    core::int x = let core::int? #t5 = c.{self::C::_f7}{core::int?} in #t5 == null ?{core::int} #t5 as{Unchecked} core::int : #t5{core::int};
    self::acceptsInt(x);
  }
}
static method testTopLevelField(self::C c) → void {
  if(!(c.{self::C::_f8}{core::int?} == null)) {
    core::int x = let core::int? #t6 = c.{self::C::_f8}{core::int?} in #t6 == null ?{core::int} #t6 as{Unchecked} core::int : #t6{core::int};
    self::acceptsInt(x);
  }
}
static method testTopLevelGetter(self::C c) → void {
  if(!(c.{self::C::_f9}{core::int?} == null)) {
    core::int x = let core::int? #t7 = c.{self::C::_f9}{core::int?} in #t7 == null ?{core::int} #t7 as{Unchecked} core::int : #t7{core::int};
    self::acceptsInt(x);
  }
}
static method testExtensionGetter(self::C c) → void {
  if(!(c.{self::C::_f10}{core::int?} == null)) {
    core::int x = let core::int? #t8 = c.{self::C::_f10}{core::int?} in #t8 == null ?{core::int} #t8 as{Unchecked} core::int : #t8{core::int};
    self::acceptsInt(x);
  }
}
static method testGetterInPart(self::C c) → void {
  if(!(c.{self::C::_f11}{core::int?} == null)) {
    core::int? x = c.{self::C::_f11}{core::int?};
    x = null;
  }
}
static method testFieldInMixin(self::C c) → void {
  if(!(c.{self::C::_f12}{core::int?} == null)) {
    core::int? x = c.{self::C::_f12}{core::int?};
    x = null;
  }
}
static method testGetterInMixin(self::C c) → void {
  if(!(c.{self::C::_f13}{core::int?} == null)) {
    core::int? x = c.{self::C::_f13}{core::int?};
    x = null;
  }
}
static method main() → dynamic {}
