library;
import self as self;
import "dart:core" as core;

class A extends core::Object {
  synthetic constructor •() → self::A
    : super core::Object::•()
    ;
}
class B1<T extends core::Object? = dynamic> extends core::Object implements self::A {
  synthetic constructor •() → self::B1<self::B1::T%>
    : super core::Object::•()
    ;
}
class B2<T extends core::Object? = dynamic> extends core::Object implements self::A {
  synthetic constructor •() → self::B2<self::B2::T%>
    : super core::Object::•()
    ;
}
class C1<T extends core::Object? = dynamic> extends core::Object implements self::B1<self::C1::T%>, self::B2<self::C1::T%> {
  synthetic constructor •() → self::C1<self::C1::T%>
    : super core::Object::•()
    ;
}
class C2<T extends core::Object? = dynamic> extends core::Object implements self::B1<self::C2::T%>, self::B2<self::C2::T%> {
  synthetic constructor •() → self::C2<self::C2::T%>
    : super core::Object::•()
    ;
}
class Indexable<ReadType extends core::Object? = dynamic, WriteType extends core::Object? = dynamic> extends core::Object {
  final field self::Indexable::ReadType% _value;
  constructor •(self::Indexable::ReadType% _value) → self::Indexable<self::Indexable::ReadType%, self::Indexable::WriteType%>
    : self::Indexable::_value = _value, super core::Object::•()
    ;
  operator [](core::int index) → self::Indexable::ReadType%
    return this.{self::Indexable::_value}{self::Indexable::ReadType%};
  operator []=(core::int index, covariant-by-class self::Indexable::WriteType% value) → void {}
}
class Test1 extends self::Indexable<self::C1<core::int>?, core::Object?> {
  constructor •() → self::Test1
    : super self::Indexable::•(null)
    ;
  method test() → dynamic {
    self::C2<core::double> c2Double = new self::C2::•<core::double>();
    self::contextB1<dynamic>(let final core::int #t1 = 0 in let final self::C1<core::int>? #t2 = this.{self::Indexable::[]}(#t1){(core::int) → self::C1<core::int>?} in #t2 == null ?{self::B1<dynamic>} let final self::C2<core::double> #t3 = c2Double in let final void #t4 = this.{self::Indexable::[]=}(#t1, #t3){(core::int, core::Object?) → void} in #t3 : #t2{self::C1<core::int>});
  }
}
class Test2 extends self::Indexable<core::Iterable<core::int>?, core::Object?> {
  constructor •() → self::Test2
    : super self::Indexable::•(null)
    ;
  method test() → dynamic {
    core::List<core::num> listNum = <core::num>[];
    self::contextIterable<core::num>(let final core::int #t5 = 0 in let final core::Iterable<core::int>? #t6 = this.{self::Indexable::[]}(#t5){(core::int) → core::Iterable<core::int>?} in #t6 == null ?{core::Iterable<core::num>} let final core::List<core::num> #t7 = listNum in let final void #t8 = this.{self::Indexable::[]=}(#t5, #t7){(core::int, core::Object?) → void} in #t7 : #t6{core::Iterable<core::int>});
  }
}
static method contextIterable<T extends core::Object? = dynamic>(core::Iterable<self::contextIterable::T%> x) → core::Iterable<self::contextIterable::T%>
  return x;
static method contextB1<T extends core::Object? = dynamic>(self::B1<self::contextB1::T%> x) → self::B1<self::contextB1::T%>
  return x;
static method main() → dynamic {
  new self::Test1::•().{self::Test1::test}(){() → dynamic};
  new self::Test2::•().{self::Test2::test}(){() → dynamic};
}
