library;
import self as self;
import "dart:core" as core;

class A extends core::Object {
  synthetic constructor •() → self::A
    : super core::Object::•()
    ;
}
class B1<T extends core::Object? = dynamic> extends core::Object implements self::A {
  synthetic constructor •() → self::B1<self::B1::T%>
    : super core::Object::•()
    ;
}
class B2<T extends core::Object? = dynamic> extends core::Object implements self::A {
  synthetic constructor •() → self::B2<self::B2::T%>
    : super core::Object::•()
    ;
}
class C1<T extends core::Object? = dynamic> extends core::Object implements self::B1<self::C1::T%>, self::B2<self::C1::T%> {
  synthetic constructor •() → self::C1<self::C1::T%>
    : super core::Object::•()
    ;
}
class C2<T extends core::Object? = dynamic> extends core::Object implements self::B1<self::C2::T%>, self::B2<self::C2::T%> {
  synthetic constructor •() → self::C2<self::C2::T%>
    : super core::Object::•()
    ;
}
class Indexable<ReadType extends core::Object? = dynamic, WriteType extends core::Object? = dynamic> extends core::Object {
  final field self::Indexable::ReadType% _value;
  constructor •(self::Indexable::ReadType% _value) → self::Indexable<self::Indexable::ReadType%, self::Indexable::WriteType%>
    : self::Indexable::_value = _value, super core::Object::•()
    ;
  operator [](core::int index) → self::Indexable::ReadType%
    return this.{self::Indexable::_value}{self::Indexable::ReadType%};
  operator []=(core::int index, covariant-by-class self::Indexable::WriteType% value) → void {}
}
static method contextIterable<T extends core::Object? = dynamic>(core::Iterable<self::contextIterable::T%> x) → core::Iterable<self::contextIterable::T%>
  return x;
static method contextB1<T extends core::Object? = dynamic>(self::B1<self::contextB1::T%> x) → self::B1<self::contextB1::T%>
  return x;
static method main() → dynamic {
  self::C2<core::double> c2Double = new self::C2::•<core::double>();
  self::contextB1<dynamic>(let final self::Indexable<self::C1<core::int>?, core::Object?> #t1 = new self::Indexable::•<self::C1<core::int>?, core::Object?>(null) in let final core::int #t2 = 0 in let final self::C1<core::int>? #t3 = #t1.{self::Indexable::[]}(#t2){(core::int) → self::C1<core::int>?} in #t3 == null ?{self::B1<dynamic>} let final self::C2<core::double> #t4 = c2Double in let final void #t5 = #t1.{self::Indexable::[]=}(#t2, #t4){(core::int, core::Object?) → void} in #t4 : #t3{self::C1<core::int>});
  core::List<core::num> listNum = core::_GrowableList::•<core::num>(0);
  self::contextIterable<core::num>(let final self::Indexable<core::Iterable<core::int>?, core::Object?> #t6 = new self::Indexable::•<core::Iterable<core::int>?, core::Object?>(null) in let final core::int #t7 = 0 in let final core::Iterable<core::int>? #t8 = #t6.{self::Indexable::[]}(#t7){(core::int) → core::Iterable<core::int>?} in #t8 == null ?{core::Iterable<core::num>} let final core::List<core::num> #t9 = listNum in let final void #t10 = #t6.{self::Indexable::[]=}(#t7, #t9){(core::int, core::Object?) → void} in #t9 : #t8{core::Iterable<core::int>});
}


Extra constant evaluation status:
Evaluated: VariableGet @ org-dartlang-testcase:///if_null_assignment_index_expression_test.dart:39:48 -> IntConstant(0)
Evaluated: VariableGet @ org-dartlang-testcase:///if_null_assignment_index_expression_test.dart:39:48 -> IntConstant(0)
Evaluated: VariableGet @ org-dartlang-testcase:///if_null_assignment_index_expression_test.dart:42:65 -> IntConstant(0)
Evaluated: VariableGet @ org-dartlang-testcase:///if_null_assignment_index_expression_test.dart:42:65 -> IntConstant(0)
Extra constant evaluation: evaluated: 47, effectively constant: 4
