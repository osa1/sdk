library;
import self as self;
import "dart:core" as core;

class A extends core::Object {
  synthetic constructor •() → self::A
    : super core::Object::•()
    ;
}
class B1<T extends core::Object? = dynamic> extends core::Object implements self::A {
  synthetic constructor •() → self::B1<self::B1::T%>
    : super core::Object::•()
    ;
}
class B2<T extends core::Object? = dynamic> extends core::Object implements self::A {
  synthetic constructor •() → self::B2<self::B2::T%>
    : super core::Object::•()
    ;
}
class C1<T extends core::Object? = dynamic> extends core::Object implements self::B1<self::C1::T%>, self::B2<self::C1::T%> {
  synthetic constructor •() → self::C1<self::C1::T%>
    : super core::Object::•()
    ;
}
class C2<T extends core::Object? = dynamic> extends core::Object implements self::B1<self::C2::T%>, self::B2<self::C2::T%> {
  synthetic constructor •() → self::C2<self::C2::T%>
    : super core::Object::•()
    ;
}
class Test extends core::Object {
  synthetic constructor •() → self::Test
    : super core::Object::•()
    ;
  get pC1IntQuestion() → self::C1<core::int>?
    return null;
  set pC1IntQuestion(core::Object? value) → void {}
  get pIterableIntQuestion() → core::Iterable<core::int>?
    return null;
  set pIterableIntQuestion(core::Object? value) → void {}
}
static method contextIterableQuestion<T extends core::Object? = dynamic>(core::Iterable<self::contextIterableQuestion::T%>? x) → core::Iterable<self::contextIterableQuestion::T%>?
  return x;
static method contextB1Question<T extends core::Object? = dynamic>(self::B1<self::contextB1Question::T%>? x) → self::B1<self::contextB1Question::T%>?
  return x;
static method main() → dynamic {
  self::Test? test = new self::Test::•() as{Unchecked} self::Test?;
  self::C2<core::double> c2Double = new self::C2::•<core::double>();
  self::contextB1Question<dynamic>(let final self::Test? #t1 = test in #t1 == null ?{self::B1<dynamic>?} null : let final self::C1<core::int>? #t2 = #t1.{self::Test::pC1IntQuestion}{self::C1<core::int>?} in #t2 == null ?{self::B1<dynamic>?} #t1.{self::Test::pC1IntQuestion} = c2Double : #t2{self::C1<core::int>});
  core::List<core::num> listNum = core::_GrowableList::•<core::num>(0);
  self::contextIterableQuestion<core::num>(let final self::Test? #t3 = test in #t3 == null ?{core::Iterable<core::num>?} null : let final core::Iterable<core::int>? #t4 = #t3.{self::Test::pIterableIntQuestion}{core::Iterable<core::int>?} in #t4 == null ?{core::Iterable<core::num>?} #t3.{self::Test::pIterableIntQuestion} = listNum : #t4{core::Iterable<core::int>});
}
