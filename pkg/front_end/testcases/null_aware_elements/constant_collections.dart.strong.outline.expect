library;
import self as self;
import "dart:core" as core;

class Verifier extends core::Object /*hasConstConstructor*/  {
  const constructor test1() → self::Verifier
    : assert(core::identical(self::literal1, self::literal1expected)), super core::Object::•()
    ;
  const constructor test2() → self::Verifier
    : assert(core::identical(self::literal2, self::literal2expected)), super core::Object::•()
    ;
  const constructor test3a() → self::Verifier
    : assert(core::identical(self::literal3a, self::literal3aExpected)), super core::Object::•()
    ;
  const constructor test3b() → self::Verifier
    : assert(core::identical(self::literal3b, self::literal3bExpected)), super core::Object::•()
    ;
  const constructor test4a() → self::Verifier
    : assert(core::identical(self::literal4a, self::literal4aExpected)), super core::Object::•()
    ;
  const constructor test4b() → self::Verifier
    : assert(core::identical(self::literal4b, self::literal4bExpected)), super core::Object::•()
    ;
  const constructor test5aa() → self::Verifier
    : assert(core::identical(self::literal5aa, self::literal5aaExpected)), super core::Object::•()
    ;
  const constructor test5ab() → self::Verifier
    : assert(core::identical(self::literal5ab, self::literal5abExpected)), super core::Object::•()
    ;
  const constructor test5ba() → self::Verifier
    : assert(core::identical(self::literal5ba, self::literal5baExpected)), super core::Object::•()
    ;
  const constructor test5bb() → self::Verifier
    : assert(core::identical(self::literal5bb, self::literal5bbExpected)), super core::Object::•()
    ;
}
static const field core::int? expr1 = 5;
static const field core::List<core::int> literal1 = let final core::int? #t1 = self::expr1 in #t1 == null ?{core::Iterable<core::int>} const <core::int>[] : const <core::int>[#t1{core::int}];
static const field core::List<core::int> literal1expected = const <core::int>[5];
static const field core::String? expr2 = null;
static const field core::Set<core::String> literal2 = let final core::String? #t2 = self::expr2 in #t2 == null ?{core::Iterable<core::String>} const <core::String>{} : const <core::String>{#t2{core::String}};
static const field core::Set<core::String> literal2expected = const <core::String>{};
static const field core::int? key3a = 1;
static const field core::int? key3b = null;
static const field core::bool value3 = false;
static const field core::Map<core::int, core::bool> literal3a = let final core::int? #t3 = self::key3a in #t3 == null ?{core::Map<core::int, core::bool>} const <core::int, core::bool>{} : const <core::int, core::bool>{#t3{core::int}: self::value3};
static const field core::Map<core::int, core::bool> literal3aExpected = const <core::int, core::bool>{1: false};
static const field core::Map<core::int, core::bool> literal3b = let final core::int? #t4 = self::key3b in #t4 == null ?{core::Map<core::int, core::bool>} const <core::int, core::bool>{} : const <core::int, core::bool>{#t4{core::int}: self::value3};
static const field core::Map<core::int, core::bool> literal3bExpected = const <core::int, core::bool>{};
static const field core::Symbol key4 = #key4;
static const field core::int? value4a = 0;
static const field core::int? value4b = null;
static const field core::Map<core::Symbol, core::int> literal4a = let final core::int? #t5 = self::value4a in #t5 == null ?{core::Map<core::Symbol, core::int>} const <core::Symbol, core::int>{} : const <core::Symbol, core::int>{self::key4: #t5{core::int}};
static const field core::Map<core::Symbol, core::int> literal4aExpected = const <core::Symbol, core::int>{#key4: 0};
static const field core::Map<core::Symbol, core::int> literal4b = let final core::int? #t6 = self::value4b in #t6 == null ?{core::Map<core::Symbol, core::int>} const <core::Symbol, core::int>{} : const <core::Symbol, core::int>{self::key4: #t6{core::int}};
static const field core::Map<core::Symbol, core::int> literal4bExpected = const <core::Symbol, core::int>{};
static const field core::bool? key5a = true;
static const field core::bool? key5b = null;
static const field core::String? value5a = "value5a";
static const field core::String? value5b = null;
static const field core::Map<core::bool, core::String> literal5aa = let final core::bool? #t7 = self::key5a in #t7 == null ?{core::Map<core::bool, core::String>} const <core::bool, core::String>{} : let final core::String? #t8 = self::value5a in #t8 == null ?{core::Map<core::bool, core::String>} const <core::bool, core::String>{} : const <core::bool, core::String>{#t7{core::bool}: #t8{core::String}};
static const field core::Map<core::bool, core::String> literal5aaExpected = const <core::bool, core::String>{true: "value5a"};
static const field core::Map<core::bool, core::String> literal5ab = let final core::bool? #t9 = self::key5a in #t9 == null ?{core::Map<core::bool, core::String>} const <core::bool, core::String>{} : let final core::String? #t10 = self::value5b in #t10 == null ?{core::Map<core::bool, core::String>} const <core::bool, core::String>{} : const <core::bool, core::String>{#t9{core::bool}: #t10{core::String}};
static const field core::Map<core::bool, core::String> literal5abExpected = const <core::bool, core::String>{};
static const field core::Map<core::bool, core::String> literal5ba = let final core::bool? #t11 = self::key5b in #t11 == null ?{core::Map<core::bool, core::String>} const <core::bool, core::String>{} : let final core::String? #t12 = self::value5a in #t12 == null ?{core::Map<core::bool, core::String>} const <core::bool, core::String>{} : const <core::bool, core::String>{#t11{core::bool}: #t12{core::String}};
static const field core::Map<core::bool, core::String> literal5baExpected = const <core::bool, core::String>{};
static const field core::Map<core::bool, core::String> literal5bb = let final core::bool? #t13 = self::key5b in #t13 == null ?{core::Map<core::bool, core::String>} const <core::bool, core::String>{} : let final core::String? #t14 = self::value5b in #t14 == null ?{core::Map<core::bool, core::String>} const <core::bool, core::String>{} : const <core::bool, core::String>{#t13{core::bool}: #t14{core::String}};
static const field core::Map<core::bool, core::String> literal5bbExpected = const <core::bool, core::String>{};
static field self::Verifier test1;
static field self::Verifier test2;
static field self::Verifier test3a;
static field self::Verifier test3b;
static field self::Verifier test4a;
static field self::Verifier test4b;
static field self::Verifier test5aa;
static field self::Verifier test5ab;
static field self::Verifier test5ba;
static field self::Verifier test5bb;


Extra constant evaluation status:
Evaluated: StaticInvocation @ org-dartlang-testcase:///constant_collections.dart:43:35 -> BoolConstant(true)
Evaluated: StaticInvocation @ org-dartlang-testcase:///constant_collections.dart:44:35 -> BoolConstant(true)
Evaluated: StaticInvocation @ org-dartlang-testcase:///constant_collections.dart:45:36 -> BoolConstant(true)
Evaluated: StaticInvocation @ org-dartlang-testcase:///constant_collections.dart:46:36 -> BoolConstant(true)
Evaluated: StaticInvocation @ org-dartlang-testcase:///constant_collections.dart:47:36 -> BoolConstant(true)
Evaluated: StaticInvocation @ org-dartlang-testcase:///constant_collections.dart:48:36 -> BoolConstant(true)
Evaluated: StaticInvocation @ org-dartlang-testcase:///constant_collections.dart:49:37 -> BoolConstant(true)
Evaluated: StaticInvocation @ org-dartlang-testcase:///constant_collections.dart:50:37 -> BoolConstant(true)
Evaluated: StaticInvocation @ org-dartlang-testcase:///constant_collections.dart:51:37 -> BoolConstant(true)
Evaluated: StaticInvocation @ org-dartlang-testcase:///constant_collections.dart:52:37 -> BoolConstant(true)
Evaluated: ListConcatenation @ org-dartlang-testcase:///constant_collections.dart:6:33 -> ListConstant(const <int>[5])
Evaluated: ListLiteral @ org-dartlang-testcase:///constant_collections.dart:7:36 -> ListConstant(const <int>[5])
Evaluated: SetConcatenation @ org-dartlang-testcase:///constant_collections.dart:10:38 -> SetConstant(const <String>{})
Evaluated: SetLiteral @ org-dartlang-testcase:///constant_collections.dart:11:38 -> SetConstant(const <String>{})
Evaluated: MapConcatenation @ org-dartlang-testcase:///constant_collections.dart:16:22 -> MapConstant(const <int, bool>{1: false})
Evaluated: MapLiteral @ org-dartlang-testcase:///constant_collections.dart:17:53 -> MapConstant(const <int, bool>{1: false})
Evaluated: MapConcatenation @ org-dartlang-testcase:///constant_collections.dart:18:22 -> MapConstant(const <int, bool>{})
Evaluated: MapLiteral @ org-dartlang-testcase:///constant_collections.dart:19:53 -> MapConstant(const <int, bool>{})
Evaluated: SymbolLiteral @ org-dartlang-testcase:///constant_collections.dart:21:21 -> SymbolConstant(#key4)
Evaluated: MapConcatenation @ org-dartlang-testcase:///constant_collections.dart:24:24 -> MapConstant(const <Symbol, int>{#key4: 0})
Evaluated: MapLiteral @ org-dartlang-testcase:///constant_collections.dart:25:57 -> MapConstant(const <Symbol, int>{#key4: 0})
Evaluated: MapConcatenation @ org-dartlang-testcase:///constant_collections.dart:26:24 -> MapConstant(const <Symbol, int>{})
Evaluated: MapLiteral @ org-dartlang-testcase:///constant_collections.dart:27:57 -> MapConstant(const <Symbol, int>{})
Evaluated: MapConcatenation @ org-dartlang-testcase:///constant_collections.dart:33:25 -> MapConstant(const <bool, String>{true: "value5a"})
Evaluated: MapLiteral @ org-dartlang-testcase:///constant_collections.dart:34:60 -> MapConstant(const <bool, String>{true: "value5a"})
Evaluated: MapConcatenation @ org-dartlang-testcase:///constant_collections.dart:35:25 -> MapConstant(const <bool, String>{})
Evaluated: MapLiteral @ org-dartlang-testcase:///constant_collections.dart:36:60 -> MapConstant(const <bool, String>{})
Evaluated: MapConcatenation @ org-dartlang-testcase:///constant_collections.dart:37:25 -> MapConstant(const <bool, String>{})
Evaluated: MapLiteral @ org-dartlang-testcase:///constant_collections.dart:38:60 -> MapConstant(const <bool, String>{})
Evaluated: MapConcatenation @ org-dartlang-testcase:///constant_collections.dart:39:25 -> MapConstant(const <bool, String>{})
Evaluated: MapLiteral @ org-dartlang-testcase:///constant_collections.dart:40:60 -> MapConstant(const <bool, String>{})
Extra constant evaluation: evaluated: 31, effectively constant: 31
