library;
import self as self;
import "dart:core" as core;

typedef Exactly<invariant T extends core::Object? = dynamic> = (T%) → T%;
extension E<X extends core::Object? = dynamic> on X% {
  method expectStaticType = self::E|expectStaticType;
  method tearoff expectStaticType = self::E|get#expectStaticType;
}
static method test(core::String? key, core::num? value) → dynamic {
  core::Map<core::String?, core::num?> map1 = <core::String?, core::num?>{key: value};
  core::Map<core::String, core::num?> map2 = block {
    final core::Map<core::String, core::num?> #t1 = <core::String, core::num?>{};
    final core::String? #t2 = key;
    if(!(#t2 == null))
      #t1.{core::Map::[]=}{Invariant}(#t2{core::String}, value){(core::String, core::num?) → void};
  } =>#t1;
  core::Map<core::String?, core::num> map3 = block {
    final core::Map<core::String?, core::num> #t3 = <core::String?, core::num>{};
    final core::String? #t4 = key;
    final core::num? #t5 = value;
    if(!(#t5 == null))
      #t3.{core::Map::[]=}{Invariant}(#t4, #t5{core::num}){(core::String?, core::num) → void};
  } =>#t3;
  core::Map<core::String, core::num> map4 = block {
    final core::Map<core::String, core::num> #t6 = <core::String, core::num>{};
    final core::String? #t7 = key;
    if(!(#t7 == null)) {
      final core::num? #t8 = value;
      if(!(#t8 == null))
        #t6.{core::Map::[]=}{Invariant}(#t7{core::String}, #t8{core::num}){(core::String, core::num) → void};
    }
  } =>#t6;
  self::E|expectStaticType<core::Map<core::String?, core::num?>, (core::Map<core::String?, core::num?>) → core::Map<core::String?, core::num?>>(map1);
  self::E|expectStaticType<core::Map<core::String, core::num?>, (core::Map<core::String, core::num?>) → core::Map<core::String, core::num?>>(map2);
  self::E|expectStaticType<core::Map<core::String?, core::num>, (core::Map<core::String?, core::num>) → core::Map<core::String?, core::num>>(map3);
  self::E|expectStaticType<core::Map<core::String, core::num>, (core::Map<core::String, core::num>) → core::Map<core::String, core::num>>(map4);
}
static extension-member method E|expectStaticType<X extends core::Object? = dynamic, Y extends (self::E|expectStaticType::X%) → self::E|expectStaticType::X% = (dynamic) → dynamic>(lowered final self::E|expectStaticType::X% #this) → void {}
static extension-member method E|get#expectStaticType<X extends core::Object? = dynamic>(lowered final self::E|get#expectStaticType::X% #this) → <Y extends (self::E|get#expectStaticType::X%) → self::E|get#expectStaticType::X% = (dynamic) → dynamic>() → void
  return <Y extends (self::E|get#expectStaticType::X%) → self::E|get#expectStaticType::X% = (dynamic) → dynamic>() → void => self::E|expectStaticType<self::E|get#expectStaticType::X%, Y>(#this);
