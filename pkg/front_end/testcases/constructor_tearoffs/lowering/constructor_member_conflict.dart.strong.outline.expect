library;
import self as self;
import "dart:core" as core;

class Class extends core::Object {
  field dynamic constructorAndField;
  field dynamic factoryAndField;
  field dynamic redirectingFactoryAndField;
  constructor constructorAndMethod() → self::Class
    ;
  constructor constructorAndField() → self::Class
    ;
  constructor constructorAndGetter() → self::Class
    ;
  constructor constructorAndSetter() → self::Class
    ;
  static method _#constructorAndMethod#tearOff() → self::Class
    return new self::Class::constructorAndMethod();
  method constructorAndMethod() → void
    ;
  static factory factoryAndMethod() → self::Class
    ;
  static method _#factoryAndMethod#tearOff() → self::Class
    return self::Class::factoryAndMethod();
  method factoryAndMethod() → void
    ;
  static factory redirectingFactoryAndMethod() → self::Class /* redirection-target: self::Class::constructorAndMethod */
    return new self::Class::constructorAndMethod();
  static method _#redirectingFactoryAndMethod#tearOff() → self::Class
    return new self::Class::constructorAndMethod();
  method redirectingFactoryAndMethod() → void
    ;
  static method _#constructorAndField#tearOff() → self::Class
    return new self::Class::constructorAndField();
  static factory factoryAndField() → self::Class
    ;
  static method _#factoryAndField#tearOff() → self::Class
    return self::Class::factoryAndField();
  static factory redirectingFactoryAndField() → self::Class /* redirection-target: self::Class::constructorAndField */
    return new self::Class::constructorAndField();
  static method _#redirectingFactoryAndField#tearOff() → self::Class
    return new self::Class::constructorAndField();
  static method _#constructorAndGetter#tearOff() → self::Class
    return new self::Class::constructorAndGetter();
  get constructorAndGetter() → dynamic
    ;
  static factory factoryAndGetter() → self::Class
    ;
  static method _#factoryAndGetter#tearOff() → self::Class
    return self::Class::factoryAndGetter();
  get factoryAndGetter() → dynamic
    ;
  static factory redirectingFactoryAndGetter() → self::Class /* redirection-target: self::Class::constructorAndGetter */
    return new self::Class::constructorAndGetter();
  static method _#redirectingFactoryAndGetter#tearOff() → self::Class
    return new self::Class::constructorAndGetter();
  get redirectingFactoryAndGetter() → dynamic
    ;
  static method _#constructorAndSetter#tearOff() → self::Class
    return new self::Class::constructorAndSetter();
  set constructorAndSetter(dynamic value) → void
    ;
  static factory factoryAndSetter() → self::Class
    ;
  static method _#factoryAndSetter#tearOff() → self::Class
    return self::Class::factoryAndSetter();
  set factoryAndSetter(dynamic value) → void
    ;
  static factory redirectingFactoryAndSetter() → self::Class /* redirection-target: self::Class::constructorAndSetter */
    return new self::Class::constructorAndSetter();
  static method _#redirectingFactoryAndSetter#tearOff() → self::Class
    return new self::Class::constructorAndSetter();
  set redirectingFactoryAndSetter(dynamic value) → void
    ;
}
