library;
//
// Problems in library:
//
// pkg/front_end/testcases/wildcard_variables/for_loop.dart:8:11: Error: Undefined name '_'.
//     print(_);
//           ^
//
// pkg/front_end/testcases/wildcard_variables/for_loop.dart:13:11: Error: Undefined name '_'.
//     print(_);
//           ^
//
// pkg/front_end/testcases/wildcard_variables/for_loop.dart:18:11: Error: Undefined name '_'.
//     print(_);
//           ^
//
import self as self;
import "dart:core" as core;
import "dart:async" as asy;

static method test() → dynamic async /* emittedValueType= dynamic */ {
  for (wildcard core::int _ = 0, wildcard core::int _ = 2; ; ) {
    core::print(invalid-expression "pkg/front_end/testcases/wildcard_variables/for_loop.dart:8:11: Error: Undefined name '_'.
    print(_);
          ^");
  }
  core::List<dynamic> list = core::_GrowableList::•<dynamic>(0);
  {
    synthesized core::Iterator<dynamic> :sync-for-iterator = list.{core::Iterable::iterator}{core::Iterator<dynamic>};
    for (; :sync-for-iterator.{core::Iterator::moveNext}(){() → core::bool}; ) {
      wildcard dynamic _ = :sync-for-iterator.{core::Iterator::current}{dynamic};
      {
        core::print(invalid-expression "pkg/front_end/testcases/wildcard_variables/for_loop.dart:13:11: Error: Undefined name '_'.
    print(_);
          ^");
      }
    }
  }
  asy::Stream<dynamic> stream = new asy::_EmptyStream::•<dynamic>();
  {
    synthesized asy::Stream<dynamic> :stream = stream;
    synthesized asy::_StreamIterator<dynamic>? :for-iterator = new asy::_StreamIterator::•<dynamic>(:stream);
    try
      while (let dynamic #t1 = asy::_asyncStarMoveNextHelper(:stream) in await :for-iterator.{asy::_StreamIterator::moveNext}(){() → asy::Future<core::bool>}) {
        wildcard dynamic _ = :for-iterator.{asy::_StreamIterator::current}{dynamic};
        {
          core::print(invalid-expression "pkg/front_end/testcases/wildcard_variables/for_loop.dart:18:11: Error: Undefined name '_'.
    print(_);
          ^");
        }
      }
    finally
      if(!(:for-iterator.{asy::_StreamIterator::_subscription}{asy::StreamSubscription<dynamic>?} == null))
        await :for-iterator.{asy::_StreamIterator::cancel}(){() → asy::Future<dynamic>};
  }
}
