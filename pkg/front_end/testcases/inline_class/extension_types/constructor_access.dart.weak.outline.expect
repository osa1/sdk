library;
import self as self;
import "dart:core" as core;

extension type Class(core::int it) {
  constructor • = self::Class|;
  tearoff • = self::Class|_#new#tearOff;
  constructor named = self::Class|named;
  tearoff named = self::Class|_#named#tearOff;
}
extension type GenericClass<T extends core::Object? = dynamic>(T% it) {
  constructor • = self::GenericClass|;
  tearoff • = self::GenericClass|_#new#tearOff;
}
static inline-class-member method Class|(dynamic it) → self::Class
  ;
static inline-class-member method Class|_#new#tearOff(dynamic it) → self::Class
  return self::Class|(it);
static inline-class-member method Class|named(core::int it) → self::Class
  ;
static inline-class-member method Class|_#named#tearOff(core::int it) → self::Class
  return self::Class|named(it);
static inline-class-member method GenericClass|<T extends core::Object? = dynamic>(dynamic it) → self::GenericClass<self::GenericClass|::T%>
  ;
static inline-class-member method GenericClass|_#new#tearOff<T extends core::Object? = dynamic>(dynamic it) → self::GenericClass<self::GenericClass|_#new#tearOff::T%>
  return self::GenericClass|<self::GenericClass|_#new#tearOff::T%>(it);
static method main() → dynamic
  ;
static method expect(dynamic expected, dynamic actual) → dynamic
  ;
