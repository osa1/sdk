library;
import self as self;
import "main_lib1.dart" as mai;
additionalExports = (mai::main,
  mai::expect)

export "org-dartlang-testcase:///main_lib1.dart";


library;
import self as mai;
import "main_lib2.dart" as mai2;
import "dart:core" as core;

import "org-dartlang-testcase:///main_lib2.dart";

static method main() → dynamic {
  mai2::ExtensionType /* = core::int */ e1 = mai2::ExtensionType|(42);
  mai::expect(42, mai2::ExtensionType|instanceMethod(e1));
  mai::expect(42, mai2::ExtensionType|get#instanceMethod(e1)(){() → core::int});
  mai::expect(43, mai2::ExtensionType|+(e1, 1));
  mai::expect(42, e1 as{Unchecked} core::int);
  mai::expect(42, mai2::ExtensionType|get#instanceGetter(e1));
  mai2::ExtensionType|set#instanceSetter(e1, 43);
  mai::expect(87, mai2::ExtensionType|staticMethod());
  mai::expect(87, #C1(){() → core::int});
  mai::expect(123, mai2::ExtensionType|staticField);
  mai::expect(123, mai2::ExtensionType|staticGetter);
  mai2::ExtensionType|staticSetter = 124;
  mai::expect(124, mai2::ExtensionType|staticField);
  mai::expect(124, mai2::ExtensionType|staticGetter);
  mai::expect(42, #C2(42){(core::int) → mai2::ExtensionType /* = core::int */});
  mai::expect(43, mai2::ExtensionType|named(42));
  mai::expect(43, #C3(42){(core::int) → mai2::ExtensionType /* = core::int */});
  mai::expect(44, mai2::ExtensionType|redirectingGenerative(42));
  mai::expect(44, #C4(42){(core::int) → mai2::ExtensionType /* = core::int */});
  mai::expect(45, mai2::ExtensionType|fact(42));
  mai::expect(45, #C5(42){(core::int) → mai2::ExtensionType /* = core::int */});
  mai::expect(42, mai2::ExtensionType|(42));
  mai::expect(42, #C6(42){(core::int) → mai2::ExtensionType /* = core::int */});
}
static method expect(dynamic expected, dynamic actual) → dynamic {
  if(!(expected =={core::Object::==}{(core::Object) → core::bool} actual))
    throw "Expected ${expected}, actual ${actual}";
}

constants  {
  #C1 = static-tearoff mai2::ExtensionType|staticMethod
  #C2 = static-tearoff mai2::ExtensionType|_#new#tearOff
  #C3 = static-tearoff mai2::ExtensionType|_#named#tearOff
  #C4 = static-tearoff mai2::ExtensionType|_#redirectingGenerative#tearOff
  #C5 = static-tearoff mai2::ExtensionType|_#fact#tearOff
  #C6 = static-tearoff mai2::ExtensionType|_#redirectingFactory#tearOff
}
