library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

inline class X /* declaredRepresentationType = core::int */ {
  constructor • = self::X|;
  tearoff • = self::X|get#;
  constructor named = self::X|named;
  tearoff named = self::X|get#named;
}
static method X|() → self::X {
  final self::X #this = 0;
  return #this;
}
static method X|get#() → self::X
  return self::X|();
static method X|named() → self::X {
  final self::X #this = 0;
  return #this;
}
static method X|get#named() → self::X
  return self::X|named();
static method main() → void {
  core::print(#C1(){() → self::X} as{ForNonNullableByDefault} core::int);
  core::print(#C2(){() → self::X} as{ForNonNullableByDefault} core::int);
}

constants  {
  #C1 = static-tearoff self::X|get#
  #C2 = static-tearoff self::X|get#named
}
