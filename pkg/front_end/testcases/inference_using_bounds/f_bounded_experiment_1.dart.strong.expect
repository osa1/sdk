library;
import self as self;
import "dart:core" as core;

class A<X extends self::A<self::A::X> = self::A<dynamic>> extends core::Object {
  synthetic constructor •() → self::A<self::A::X>
    : super core::Object::•()
    ;
}
class B extends self::A<self::B> {
  synthetic constructor •() → self::B
    : super self::A::•()
    ;
}
class C extends self::B {
  synthetic constructor •() → self::C
    : super self::B::•()
    ;
}
static method f<X extends self::A<self::f::X> = self::A<dynamic>>(self::f::X x) → void {}
static method main() → void {
  self::f<self::B>(new self::B::•());
  self::f<self::B>(new self::B::•());
  self::f<self::B>(new self::C::•());
  self::f<self::B>(new self::C::•());
}
