library;
import self as self;
import "dart:core" as core;

static method staticTypeOf<T extends core::Object? = dynamic>(self::staticTypeOf::T% x) → dynamic
  return self::staticTypeOf::T%;
static method main() → dynamic {
  hoisted has-declared-initializer core::int v;
  {
    final synthesized core::Map<core::String, core::int> #0#0 = <core::String, core::int>{"key": 42};
    if(!(#0#0.{core::Map::containsKey}(#C1){(core::Object?) → core::bool} && (let final core::int #t1 = v = let core::int? #t2 = #0#0.{core::Map::[]}(#C1){(core::Object?) → core::int?} in #t2 == null ?{core::int} #t2 as{Unchecked} core::int : #t2{core::int} in true)))
      throw{for-error-handling} new core::StateError::•("Pattern matching error");
  }
  core::print(self::staticTypeOf<core::int>(v));
}

constants  {
  #C1 = "key"
}
