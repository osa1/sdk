library;
import self as self;
import "dart:core" as core;

extension type Class1(core::int field) {
  abstract inline-class-member representation-field get field() → core::int;
  constructor • = self::Class1|constructor#;
  constructor tearoff • = self::Class1|constructor#_#new#tearOff;
}
extension type Class2(core::int field) {
  abstract inline-class-member representation-field get field() → core::int;
  constructor • = self::Class2|constructor#;
  constructor tearoff • = self::Class2|constructor#_#new#tearOff;
}
static inline-class-member method Class1|constructor#(core::int field) → self::Class1 /* = core::int */ {
  lowered final self::Class1 /* = core::int */ #this = field;
  return #this;
}
static inline-class-member method Class1|constructor#_#new#tearOff(core::int field) → self::Class1 /* = core::int */
  return self::Class1|constructor#(field);
static inline-class-member method Class2|constructor#(core::int field) → self::Class2 /* = core::int */ {
  lowered final self::Class2 /* = core::int */ #this = field;
  return #this;
}
static inline-class-member method Class2|constructor#_#new#tearOff(core::int field) → self::Class2 /* = core::int */
  return self::Class2|constructor#(field);
