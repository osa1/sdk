library;
//
// Problems in library:
//
// pkg/front_end/testcases/extension_types/extends_with.dart:12:27: Error: An extension type declaration can't have an 'extends' clause.
// Try removing the 'extends' clause or replacing the 'extends' with 'implements'.
// extension type ET1(int i) extends Foo {}
//                           ^^^^^^^
//
// pkg/front_end/testcases/extension_types/extends_with.dart:13:27: Error: An extension type declaration can't have a 'with' clause.
// Try removing the 'with' clause or replacing the 'with' with 'implements'.
// extension type ET2(int i) with Foo {}
//                           ^^^^
//
// pkg/front_end/testcases/extension_types/extends_with.dart:14:27: Error: An extension type declaration can't have a 'with' clause.
// Try removing the 'with' clause or replacing the 'with' with 'implements'.
// extension type ET3(int i) with Foo, Bar {}
//                           ^^^^
//
// pkg/front_end/testcases/extension_types/extends_with.dart:15:27: Error: An extension type declaration can't have an 'extends' clause.
// Try removing the 'extends' clause or replacing the 'extends' with 'implements'.
// extension type ET4(int i) extends Foo with Bar {}
//                           ^^^^^^^
//
// pkg/front_end/testcases/extension_types/extends_with.dart:15:39: Error: An extension type declaration can't have a 'with' clause.
// Try removing the 'with' clause or replacing the 'with' with 'implements'.
// extension type ET4(int i) extends Foo with Bar {}
//                                       ^^^^
//
// pkg/front_end/testcases/extension_types/extends_with.dart:16:27: Error: An extension type declaration can't have an 'extends' clause.
// Try removing the 'extends' clause or replacing the 'extends' with 'implements'.
// extension type ET5(int i) extends Foo with Bar, Baz {}
//                           ^^^^^^^
//
// pkg/front_end/testcases/extension_types/extends_with.dart:16:39: Error: An extension type declaration can't have a 'with' clause.
// Try removing the 'with' clause or replacing the 'with' with 'implements'.
// extension type ET5(int i) extends Foo with Bar, Baz {}
//                                       ^^^^
//
// pkg/front_end/testcases/extension_types/extends_with.dart:17:27: Error: An extension type declaration can't have an 'extends' clause.
// Try removing the 'extends' clause or replacing the 'extends' with 'implements'.
// extension type ET6(Bar i) extends Foo implements Bar {}
//                           ^^^^^^^
//
// pkg/front_end/testcases/extension_types/extends_with.dart:18:27: Error: An extension type declaration can't have a 'with' clause.
// Try removing the 'with' clause or replacing the 'with' with 'implements'.
// extension type ET7(Bar i) with Foo implements Bar {}
//                           ^^^^
//
// pkg/front_end/testcases/extension_types/extends_with.dart:19:27: Error: An extension type declaration can't have a 'with' clause.
// Try removing the 'with' clause or replacing the 'with' with 'implements'.
// extension type ET8(Baz i) with Foo, Bar implements Baz {}
//                           ^^^^
//
// pkg/front_end/testcases/extension_types/extends_with.dart:20:27: Error: An extension type declaration can't have an 'extends' clause.
// Try removing the 'extends' clause or replacing the 'extends' with 'implements'.
// extension type ET9(Baz i) extends Foo with Bar implements Baz {}
//                           ^^^^^^^
//
// pkg/front_end/testcases/extension_types/extends_with.dart:20:39: Error: An extension type declaration can't have a 'with' clause.
// Try removing the 'with' clause or replacing the 'with' with 'implements'.
// extension type ET9(Baz i) extends Foo with Bar implements Baz {}
//                                       ^^^^
//
// pkg/front_end/testcases/extension_types/extends_with.dart:21:28: Error: An extension type declaration can't have an 'extends' clause.
// Try removing the 'extends' clause or replacing the 'extends' with 'implements'.
// extension type ET10(Boz i) extends Foo with Bar, Baz implements Boz {}
//                            ^^^^^^^
//
// pkg/front_end/testcases/extension_types/extends_with.dart:21:40: Error: An extension type declaration can't have a 'with' clause.
// Try removing the 'with' clause or replacing the 'with' with 'implements'.
// extension type ET10(Boz i) extends Foo with Bar, Baz implements Boz {}
//                                        ^^^^
//
// pkg/front_end/testcases/extension_types/extends_with.dart:22:43: Error: An extension type declaration can't have an 'extends' clause.
// Try removing the 'extends' clause or replacing the 'extends' with 'implements'.
// extension type ET11(Bar i) implements Bar extends Foo {}
//                                           ^^^^^^^
//
// pkg/front_end/testcases/extension_types/extends_with.dart:23:43: Error: An extension type declaration can't have a 'with' clause.
// Try removing the 'with' clause or replacing the 'with' with 'implements'.
// extension type ET12(Bar i) implements Bar with Foo {}
//                                           ^^^^
//
// pkg/front_end/testcases/extension_types/extends_with.dart:24:43: Error: An extension type declaration can't have a 'with' clause.
// Try removing the 'with' clause or replacing the 'with' with 'implements'.
// extension type ET13(Bar i) implements Bar with Foo, Bar {}
//                                           ^^^^
//
// pkg/front_end/testcases/extension_types/extends_with.dart:25:43: Error: An extension type declaration can't have an 'extends' clause.
// Try removing the 'extends' clause or replacing the 'extends' with 'implements'.
// extension type ET14(Bar i) implements Bar extends Foo with Bar {}
//                                           ^^^^^^^
//
// pkg/front_end/testcases/extension_types/extends_with.dart:25:55: Error: An extension type declaration can't have a 'with' clause.
// Try removing the 'with' clause or replacing the 'with' with 'implements'.
// extension type ET14(Bar i) implements Bar extends Foo with Bar {}
//                                                       ^^^^
//
// pkg/front_end/testcases/extension_types/extends_with.dart:26:43: Error: An extension type declaration can't have an 'extends' clause.
// Try removing the 'extends' clause or replacing the 'extends' with 'implements'.
// extension type ET15(Bar i) implements Bar extends Foo with Bar, Baz {}
//                                           ^^^^^^^
//
// pkg/front_end/testcases/extension_types/extends_with.dart:26:55: Error: An extension type declaration can't have a 'with' clause.
// Try removing the 'with' clause or replacing the 'with' with 'implements'.
// extension type ET15(Bar i) implements Bar extends Foo with Bar, Baz {}
//                                                       ^^^^
//
// pkg/front_end/testcases/extension_types/extends_with.dart:27:43: Error: An extension type declaration can't have an 'extends' clause.
// Try removing the 'extends' clause or replacing the 'extends' with 'implements'.
// extension type ET16(Bar i) implements Bar extends Foo implements Bar {}
//                                           ^^^^^^^
//
// pkg/front_end/testcases/extension_types/extends_with.dart:27:55: Error: Each class definition can have at most one implements clause.
// Try combining all of the implements clauses into a single clause.
// extension type ET16(Bar i) implements Bar extends Foo implements Bar {}
//                                                       ^^^^^^^^^^
//
// pkg/front_end/testcases/extension_types/extends_with.dart:28:43: Error: An extension type declaration can't have a 'with' clause.
// Try removing the 'with' clause or replacing the 'with' with 'implements'.
// extension type ET17(Bar i) implements Bar with Foo implements Bar {}
//                                           ^^^^
//
// pkg/front_end/testcases/extension_types/extends_with.dart:28:52: Error: Each class definition can have at most one implements clause.
// Try combining all of the implements clauses into a single clause.
// extension type ET17(Bar i) implements Bar with Foo implements Bar {}
//                                                    ^^^^^^^^^^
//
// pkg/front_end/testcases/extension_types/extends_with.dart:29:46: Error: An extension type declaration can't have a 'with' clause.
// Try removing the 'with' clause or replacing the 'with' with 'implements'.
// extension type ET18(BarBaz i) implements Bar with Foo, Bar implements Baz {}
//                                              ^^^^
//
// pkg/front_end/testcases/extension_types/extends_with.dart:29:60: Error: Each class definition can have at most one implements clause.
// Try combining all of the implements clauses into a single clause.
// extension type ET18(BarBaz i) implements Bar with Foo, Bar implements Baz {}
//                                                            ^^^^^^^^^^
//
// pkg/front_end/testcases/extension_types/extends_with.dart:30:46: Error: An extension type declaration can't have an 'extends' clause.
// Try removing the 'extends' clause or replacing the 'extends' with 'implements'.
// extension type ET19(BarBaz i) implements Bar extends Foo with Bar implements Baz {}
//                                              ^^^^^^^
//
// pkg/front_end/testcases/extension_types/extends_with.dart:30:58: Error: An extension type declaration can't have a 'with' clause.
// Try removing the 'with' clause or replacing the 'with' with 'implements'.
// extension type ET19(BarBaz i) implements Bar extends Foo with Bar implements Baz {}
//                                                          ^^^^
//
// pkg/front_end/testcases/extension_types/extends_with.dart:30:67: Error: Each class definition can have at most one implements clause.
// Try combining all of the implements clauses into a single clause.
// extension type ET19(BarBaz i) implements Bar extends Foo with Bar implements Baz {}
//                                                                   ^^^^^^^^^^
//
// pkg/front_end/testcases/extension_types/extends_with.dart:31:46: Error: An extension type declaration can't have an 'extends' clause.
// Try removing the 'extends' clause or replacing the 'extends' with 'implements'.
// extension type ET20(BarBaz i) implements Bar extends Foo with Bar, Baz implements Boz {}
//                                              ^^^^^^^
//
// pkg/front_end/testcases/extension_types/extends_with.dart:31:58: Error: An extension type declaration can't have a 'with' clause.
// Try removing the 'with' clause or replacing the 'with' with 'implements'.
// extension type ET20(BarBaz i) implements Bar extends Foo with Bar, Baz implements Boz {}
//                                                          ^^^^
//
// pkg/front_end/testcases/extension_types/extends_with.dart:31:72: Error: Each class definition can have at most one implements clause.
// Try combining all of the implements clauses into a single clause.
// extension type ET20(BarBaz i) implements Bar extends Foo with Bar, Baz implements Boz {}
//                                                                        ^^^^^^^^^^
//
// pkg/front_end/testcases/extension_types/extends_with.dart:32:43: Error: Each class definition can have at most one implements clause.
// Try combining all of the implements clauses into a single clause.
// extension type ET21(Boz i) implements Bar implements Boz {}
//                                           ^^^^^^^^^^
//
// pkg/front_end/testcases/extension_types/extends_with.dart:33:28: Error: An extension type declaration can't have an 'extends' clause.
// Try removing the 'extends' clause or replacing the 'extends' with 'implements'.
// extension type ET22(int i) extends Bar extends Boz {}
//                            ^^^^^^^
//
// pkg/front_end/testcases/extension_types/extends_with.dart:33:40: Error: An extension type declaration can't have an 'extends' clause.
// Try removing the 'extends' clause or replacing the 'extends' with 'implements'.
// extension type ET22(int i) extends Bar extends Boz {}
//                                        ^^^^^^^
//
// pkg/front_end/testcases/extension_types/extends_with.dart:34:28: Error: An extension type declaration can't have an 'extends' clause.
// Try removing the 'extends' clause or replacing the 'extends' with 'implements'.
// extension type ET23(int i) extends Bar, Boz {}
//                            ^^^^^^^
//
// pkg/front_end/testcases/extension_types/extends_with.dart:9:7: Error: 'BarBaz' is a supertype of itself.
// class BarBaz implements BarBaz {}
//       ^
//
// pkg/front_end/testcases/extension_types/extends_with.dart:10:7: Error: 'BarBoz' is a supertype of itself.
// class BarBoz implements BarBoz {}
//       ^
//
// pkg/front_end/testcases/extension_types/extends_with.dart:29:42: Error: The implemented interface 'Bar' must be a supertype of the representation type 'BarBaz' of extension type 'ET18'.
//  - 'Bar' is from 'pkg/front_end/testcases/extension_types/extends_with.dart'.
//  - 'BarBaz' is from 'pkg/front_end/testcases/extension_types/extends_with.dart'.
// Try changing the interface type to a supertype of 'BarBaz' or the representation type to a subtype of 'Bar'.
// extension type ET18(BarBaz i) implements Bar with Foo, Bar implements Baz {}
//                                          ^
//
// pkg/front_end/testcases/extension_types/extends_with.dart:30:42: Error: The implemented interface 'Bar' must be a supertype of the representation type 'BarBaz' of extension type 'ET19'.
//  - 'Bar' is from 'pkg/front_end/testcases/extension_types/extends_with.dart'.
//  - 'BarBaz' is from 'pkg/front_end/testcases/extension_types/extends_with.dart'.
// Try changing the interface type to a supertype of 'BarBaz' or the representation type to a subtype of 'Bar'.
// extension type ET19(BarBaz i) implements Bar extends Foo with Bar implements Baz {}
//                                          ^
//
// pkg/front_end/testcases/extension_types/extends_with.dart:31:42: Error: The implemented interface 'Bar' must be a supertype of the representation type 'BarBaz' of extension type 'ET20'.
//  - 'Bar' is from 'pkg/front_end/testcases/extension_types/extends_with.dart'.
//  - 'BarBaz' is from 'pkg/front_end/testcases/extension_types/extends_with.dart'.
// Try changing the interface type to a supertype of 'BarBaz' or the representation type to a subtype of 'Bar'.
// extension type ET20(BarBaz i) implements Bar extends Foo with Bar, Baz implements Boz {}
//                                          ^
//
// pkg/front_end/testcases/extension_types/extends_with.dart:32:39: Error: The implemented interface 'Bar' must be a supertype of the representation type 'Boz' of extension type 'ET21'.
//  - 'Bar' is from 'pkg/front_end/testcases/extension_types/extends_with.dart'.
//  - 'Boz' is from 'pkg/front_end/testcases/extension_types/extends_with.dart'.
// Try changing the interface type to a supertype of 'Boz' or the representation type to a subtype of 'Bar'.
// extension type ET21(Boz i) implements Bar implements Boz {}
//                                       ^
//
import self as self;
import "dart:core" as core;

class Foo extends core::Object {
  synthetic constructor •() → self::Foo
    ;
}
class Bar extends core::Object {
  synthetic constructor •() → self::Bar
    ;
}
class Baz extends core::Object {
  synthetic constructor •() → self::Baz
    ;
}
class Boz extends core::Object {
  synthetic constructor •() → self::Boz
    ;
}
class BarBaz extends core::Object {
  synthetic constructor •() → self::BarBaz
    ;
}
class BarBoz extends core::Object {
  synthetic constructor •() → self::BarBoz
    ;
}
extension type ET1(core::int i) {
  constructor • = self::ET1|;
  tearoff • = self::ET1|_#new#tearOff;
}
extension type ET2(core::int i) {
  constructor • = self::ET2|;
  tearoff • = self::ET2|_#new#tearOff;
}
extension type ET3(core::int i) {
  constructor • = self::ET3|;
  tearoff • = self::ET3|_#new#tearOff;
}
extension type ET4(core::int i) {
  constructor • = self::ET4|;
  tearoff • = self::ET4|_#new#tearOff;
}
extension type ET5(core::int i) {
  constructor • = self::ET5|;
  tearoff • = self::ET5|_#new#tearOff;
}
extension type ET6(self::Bar i) {
  constructor • = self::ET6|;
  tearoff • = self::ET6|_#new#tearOff;
}
extension type ET7(self::Bar i) {
  constructor • = self::ET7|;
  tearoff • = self::ET7|_#new#tearOff;
}
extension type ET8(self::Baz i) {
  constructor • = self::ET8|;
  tearoff • = self::ET8|_#new#tearOff;
}
extension type ET9(self::Baz i) {
  constructor • = self::ET9|;
  tearoff • = self::ET9|_#new#tearOff;
}
extension type ET10(self::Boz i) {
  constructor • = self::ET10|;
  tearoff • = self::ET10|_#new#tearOff;
}
extension type ET11(self::Bar i) implements self::Bar {
  constructor • = self::ET11|;
  tearoff • = self::ET11|_#new#tearOff;
}
extension type ET12(self::Bar i) implements self::Bar {
  constructor • = self::ET12|;
  tearoff • = self::ET12|_#new#tearOff;
}
extension type ET13(self::Bar i) implements self::Bar {
  constructor • = self::ET13|;
  tearoff • = self::ET13|_#new#tearOff;
}
extension type ET14(self::Bar i) implements self::Bar {
  constructor • = self::ET14|;
  tearoff • = self::ET14|_#new#tearOff;
}
extension type ET15(self::Bar i) implements self::Bar {
  constructor • = self::ET15|;
  tearoff • = self::ET15|_#new#tearOff;
}
extension type ET16(self::Bar i) implements self::Bar {
  constructor • = self::ET16|;
  tearoff • = self::ET16|_#new#tearOff;
}
extension type ET17(self::Bar i) implements self::Bar {
  constructor • = self::ET17|;
  tearoff • = self::ET17|_#new#tearOff;
}
extension type ET18(self::BarBaz i) implements self::Bar {
  constructor • = self::ET18|;
  tearoff • = self::ET18|_#new#tearOff;
}
extension type ET19(self::BarBaz i) implements self::Bar {
  constructor • = self::ET19|;
  tearoff • = self::ET19|_#new#tearOff;
}
extension type ET20(self::BarBaz i) implements self::Bar {
  constructor • = self::ET20|;
  tearoff • = self::ET20|_#new#tearOff;
}
extension type ET21(self::Boz i) implements self::Bar {
  constructor • = self::ET21|;
  tearoff • = self::ET21|_#new#tearOff;
}
extension type ET22(core::int i) {
  constructor • = self::ET22|;
  tearoff • = self::ET22|_#new#tearOff;
}
extension type ET23(core::int i) {
  constructor • = self::ET23|;
  tearoff • = self::ET23|_#new#tearOff;
}
static inline-class-member method ET1|(core::int i) → self::ET1 /* = core::int */
  ;
static inline-class-member method ET1|_#new#tearOff(core::int i) → self::ET1 /* = core::int */
  return self::ET1|(i);
static inline-class-member method ET2|(core::int i) → self::ET2 /* = core::int */
  ;
static inline-class-member method ET2|_#new#tearOff(core::int i) → self::ET2 /* = core::int */
  return self::ET2|(i);
static inline-class-member method ET3|(core::int i) → self::ET3 /* = core::int */
  ;
static inline-class-member method ET3|_#new#tearOff(core::int i) → self::ET3 /* = core::int */
  return self::ET3|(i);
static inline-class-member method ET4|(core::int i) → self::ET4 /* = core::int */
  ;
static inline-class-member method ET4|_#new#tearOff(core::int i) → self::ET4 /* = core::int */
  return self::ET4|(i);
static inline-class-member method ET5|(core::int i) → self::ET5 /* = core::int */
  ;
static inline-class-member method ET5|_#new#tearOff(core::int i) → self::ET5 /* = core::int */
  return self::ET5|(i);
static inline-class-member method ET6|(self::Bar i) → self::ET6 /* = self::Bar */
  ;
static inline-class-member method ET6|_#new#tearOff(self::Bar i) → self::ET6 /* = self::Bar */
  return self::ET6|(i);
static inline-class-member method ET7|(self::Bar i) → self::ET7 /* = self::Bar */
  ;
static inline-class-member method ET7|_#new#tearOff(self::Bar i) → self::ET7 /* = self::Bar */
  return self::ET7|(i);
static inline-class-member method ET8|_#new#tearOff(self::Baz i) → self::ET8 /* = self::Baz */
  return self::ET8|(i);
static inline-class-member method ET8|(self::Baz i) → self::ET8 /* = self::Baz */
  ;
static inline-class-member method ET9|(self::Baz i) → self::ET9 /* = self::Baz */
  ;
static inline-class-member method ET9|_#new#tearOff(self::Baz i) → self::ET9 /* = self::Baz */
  return self::ET9|(i);
static inline-class-member method ET10|(self::Boz i) → self::ET10 /* = self::Boz */
  ;
static inline-class-member method ET10|_#new#tearOff(self::Boz i) → self::ET10 /* = self::Boz */
  return self::ET10|(i);
static inline-class-member method ET11|(self::Bar i) → self::ET11 /* = self::Bar */
  ;
static inline-class-member method ET11|_#new#tearOff(self::Bar i) → self::ET11 /* = self::Bar */
  return self::ET11|(i);
static inline-class-member method ET12|(self::Bar i) → self::ET12 /* = self::Bar */
  ;
static inline-class-member method ET12|_#new#tearOff(self::Bar i) → self::ET12 /* = self::Bar */
  return self::ET12|(i);
static inline-class-member method ET13|(self::Bar i) → self::ET13 /* = self::Bar */
  ;
static inline-class-member method ET13|_#new#tearOff(self::Bar i) → self::ET13 /* = self::Bar */
  return self::ET13|(i);
static inline-class-member method ET14|(self::Bar i) → self::ET14 /* = self::Bar */
  ;
static inline-class-member method ET14|_#new#tearOff(self::Bar i) → self::ET14 /* = self::Bar */
  return self::ET14|(i);
static inline-class-member method ET15|(self::Bar i) → self::ET15 /* = self::Bar */
  ;
static inline-class-member method ET15|_#new#tearOff(self::Bar i) → self::ET15 /* = self::Bar */
  return self::ET15|(i);
static inline-class-member method ET16|(self::Bar i) → self::ET16 /* = self::Bar */
  ;
static inline-class-member method ET16|_#new#tearOff(self::Bar i) → self::ET16 /* = self::Bar */
  return self::ET16|(i);
static inline-class-member method ET17|(self::Bar i) → self::ET17 /* = self::Bar */
  ;
static inline-class-member method ET17|_#new#tearOff(self::Bar i) → self::ET17 /* = self::Bar */
  return self::ET17|(i);
static inline-class-member method ET18|(self::BarBaz i) → self::ET18 /* = self::BarBaz */
  ;
static inline-class-member method ET18|_#new#tearOff(self::BarBaz i) → self::ET18 /* = self::BarBaz */
  return self::ET18|(i);
static inline-class-member method ET19|(self::BarBaz i) → self::ET19 /* = self::BarBaz */
  ;
static inline-class-member method ET19|_#new#tearOff(self::BarBaz i) → self::ET19 /* = self::BarBaz */
  return self::ET19|(i);
static inline-class-member method ET20|(self::BarBaz i) → self::ET20 /* = self::BarBaz */
  ;
static inline-class-member method ET20|_#new#tearOff(self::BarBaz i) → self::ET20 /* = self::BarBaz */
  return self::ET20|(i);
static inline-class-member method ET21|(self::Boz i) → self::ET21 /* = self::Boz */
  ;
static inline-class-member method ET21|_#new#tearOff(self::Boz i) → self::ET21 /* = self::Boz */
  return self::ET21|(i);
static inline-class-member method ET22|(core::int i) → self::ET22 /* = core::int */
  ;
static inline-class-member method ET22|_#new#tearOff(core::int i) → self::ET22 /* = core::int */
  return self::ET22|(i);
static inline-class-member method ET23|(core::int i) → self::ET23 /* = core::int */
  ;
static inline-class-member method ET23|_#new#tearOff(core::int i) → self::ET23 /* = core::int */
  return self::ET23|(i);
