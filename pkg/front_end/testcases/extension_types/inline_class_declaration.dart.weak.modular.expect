library;
import self as self;
import "dart:core" as core;

abstract class Mixin extends core::Object /*isMixinDeclaration*/  {
}
extension type Class1(core::int it) {
  constructor • = self::Class1|;
  constructor tearoff • = self::Class1|_#new#tearOff;
}
extension type Class3<T extends core::Object? = dynamic>(core::List<T%> it) {
  constructor • = self::Class3|;
  constructor tearoff • = self::Class3|_#new#tearOff;
}
static inline-class-member method Class1|(core::int it) → self::Class1 /* = core::int */ {
  lowered final self::Class1 /* = core::int */ #this = it;
  return #this;
}
static inline-class-member method Class1|_#new#tearOff(core::int it) → self::Class1 /* = core::int */
  return self::Class1|(it);
static inline-class-member method Class3|<T extends core::Object? = dynamic>(core::List<self::Class3|::T%> it) → self::Class3<self::Class3|::T%> /* = core::List<self::Class3|::T%> */ {
  lowered final self::Class3<self::Class3|::T%> /* = core::List<self::Class3|::T%> */ #this = it;
  return #this;
}
static inline-class-member method Class3|_#new#tearOff<T extends core::Object? = dynamic>(core::List<self::Class3|_#new#tearOff::T%> it) → self::Class3<self::Class3|_#new#tearOff::T%> /* = core::List<self::Class3|_#new#tearOff::T%> */
  return self::Class3|<self::Class3|_#new#tearOff::T%>(it);
static method method(self::Class1 /* = core::int */ c1, self::Class3<core::int> /* = core::List<core::int> */ c3) → dynamic {}
