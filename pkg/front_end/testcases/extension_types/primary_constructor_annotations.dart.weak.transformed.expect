library;
import self as self;
import "dart:core" as core;

extension type ExtensionType(core::int id) {
  abstract extension-type-member representation-field get id() → core::int;
  constructor • = self::ExtensionType|constructor#;
  constructor tearoff • = self::ExtensionType|constructor#_#new#tearOff;
}
static const field core::Object annotation = #C1;
static extension-type-member method ExtensionType|constructor#(@#C1 core::int id) → self::ExtensionType% /* erasure=core::int, declared=! */ {
  lowered final self::ExtensionType% /* erasure=core::int, declared=! */ #this = id;
  return #this;
}
static extension-type-member method ExtensionType|constructor#_#new#tearOff(core::int id) → self::ExtensionType% /* erasure=core::int, declared=! */
  return self::ExtensionType|constructor#(id);

constants  {
  #C1 = core::Object {}
}


Constructor coverage from constants:
org-dartlang-testcase:///primary_constructor_annotations.dart:
- Object. (from org-dartlang-sdk:///sdk/lib/core/object.dart)
