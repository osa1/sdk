library;
import self as self;
import "dart:core" as core;

typedef F<Y extends core::Object? = dynamic> = self::E<Y%>% /* erasure=Y%, declared=! */;
extension type E<X extends core::Object? = dynamic>(X% it) {
  abstract extension-type-member representation-field get it() → X%;
  constructor • = self::E|constructor#;
  constructor tearoff • = self::E|constructor#_#new#tearOff;
}
static extension-type-member method E|constructor#<X extends core::Object? = dynamic>(self::E|constructor#::X% it) → self::E<self::E|constructor#::X%>% /* erasure=self::E|constructor#::X%, declared=! */
  ;
static extension-type-member method E|constructor#_#new#tearOff<X extends core::Object? = dynamic>(self::E|constructor#_#new#tearOff::X% it) → self::E<self::E|constructor#_#new#tearOff::X%>% /* erasure=self::E|constructor#_#new#tearOff::X%, declared=! */
  return self::E|constructor#<self::E|constructor#_#new#tearOff::X%>(it);
static method test((self::E<core::int>% /* erasure=core::int, declared=! */) → dynamic f1, (core::int) → dynamic f2) → dynamic
  ;
