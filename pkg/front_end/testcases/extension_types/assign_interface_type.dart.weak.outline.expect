library;
import self as self;
import "dart:core" as core;

class A extends core::Object {
  synthetic constructor •() → self::A
    ;
}
class B extends self::A {
  synthetic constructor •() → self::B
    ;
}
extension type C(core::Object? o) {
  constructor • = self::C|;
  tearoff • = self::C|_#new#tearOff;
}
extension type D(core::Object o) {
  constructor • = self::D|;
  tearoff • = self::D|_#new#tearOff;
}
extension type E(self::B it) implements self::A {
  constructor • = self::E|;
  tearoff • = self::E|_#new#tearOff;
}
extension type F(self::B it) implements self::E /* = self::B */, self::B {
  constructor • = self::F|;
  tearoff • = self::F|_#new#tearOff;
}
extension type G<T extends core::Object? = dynamic>(T% o) {
  constructor • = self::G|;
  tearoff • = self::G|_#new#tearOff;
}
static inline-class-member method C|(core::Object? o) → self::C /* = core::Object? */
  ;
static inline-class-member method C|_#new#tearOff(core::Object? o) → self::C /* = core::Object? */
  return self::C|(o);
static inline-class-member method D|(core::Object o) → self::D /* = core::Object */
  ;
static inline-class-member method D|_#new#tearOff(core::Object o) → self::D /* = core::Object */
  return self::D|(o);
static inline-class-member method E|(self::B it) → self::E /* = self::B */
  ;
static inline-class-member method E|_#new#tearOff(self::B it) → self::E /* = self::B */
  return self::E|(it);
static inline-class-member method F|(self::B it) → self::F /* = self::B */
  ;
static inline-class-member method F|_#new#tearOff(self::B it) → self::F /* = self::B */
  return self::F|(it);
static inline-class-member method G|<T extends core::Object? = dynamic>(self::G|::T% o) → self::G<self::G|::T%> /* = self::G|::T% */
  ;
static inline-class-member method G|_#new#tearOff<T extends core::Object? = dynamic>(self::G|_#new#tearOff::T% o) → self::G<self::G|_#new#tearOff::T%> /* = self::G|_#new#tearOff::T% */
  return self::G|<self::G|_#new#tearOff::T%>(o);
static method test<T1 extends core::Object? = dynamic, T2 extends self::A>(core::Object o, self::A a, self::B b, self::C /* = core::Object? */ c, self::D /* = core::Object */ d, self::E /* = self::B */ e, self::F /* = self::B */ f, self::G<self::test::T1%> /* = self::test::T1% */ g1, self::G<self::test::T2> /* = self::test::T2 */ g2) → dynamic
  ;
