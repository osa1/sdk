library;
//
// Problems in library:
//
// pkg/front_end/testcases/extension_types/representation.dart:9:50: Error: Duplicated parameter name 'instanceField'.
// extension type Duplicate(bool instanceField, int instanceField) {} // Error
//                                                  ^^^^^^^^^^^^^
// pkg/front_end/testcases/extension_types/representation.dart:9:31: Context: Other parameter named 'instanceField'.
// extension type Duplicate(bool instanceField, int instanceField) {} // Error
//                               ^^^^^^^^^^^^^
//
// pkg/front_end/testcases/extension_types/representation.dart:9:50: Error: 'instanceField' is already declared in this scope.
// extension type Duplicate(bool instanceField, int instanceField) {} // Error
//                                                  ^^^^^^^^^^^^^
// pkg/front_end/testcases/extension_types/representation.dart:9:31: Context: Previous declaration of 'instanceField'.
// extension type Duplicate(bool instanceField, int instanceField) {} // Error
//                               ^^^^^^^^^^^^^
//
// pkg/front_end/testcases/extension_types/representation.dart:9:31: Error: Can't use 'instanceField' because it is declared more than once.
// extension type Duplicate(bool instanceField, int instanceField) {} // Error
//                               ^^^^^^^^^^^^^
//
// pkg/front_end/testcases/extension_types/representation.dart:9:50: Error: Can't use 'instanceField' because it is declared more than once.
// extension type Duplicate(bool instanceField, int instanceField) {} // Error
//                                                  ^^^^^^^^^^^^^
//
// pkg/front_end/testcases/extension_types/representation.dart:9:31: Error: Final field 'instanceField' is not initialized.
// Try to initialize the field in the declaration or in every constructor.
// extension type Duplicate(bool instanceField, int instanceField) {} // Error
//                               ^^^^^^^^^^^^^
//
import self as self;
import "dart:core" as core;

extension type Missing(invalid-type #) {
  constructor • = self::Missing|;
  constructor tearoff • = self::Missing|_#new#tearOff;
}
extension type Multiple(core::bool instanceField1) {
  constructor • = self::Multiple|;
  constructor tearoff • = self::Multiple|_#new#tearOff;
}
extension type Duplicate(core::bool instanceField) {
  constructor • = self::Duplicate|;
  constructor tearoff • = self::Duplicate|_#new#tearOff;
}
static inline-class-member method Missing|() → self::Missing /* = invalid-type */ {
  lowered final self::Missing /* = invalid-type */ #this;
  return #this;
}
static inline-class-member method Missing|_#new#tearOff() → self::Missing /* = invalid-type */
  return self::Missing|();
static inline-class-member method Multiple|(core::bool instanceField1, core::int instanceField2) → self::Multiple /* = core::bool */ {
  lowered final self::Multiple /* = core::bool */ #this = instanceField2;
  return #this;
}
static inline-class-member method Multiple|_#new#tearOff(core::bool instanceField1, core::int instanceField2) → self::Multiple /* = core::bool */
  return self::Multiple|(instanceField1, instanceField2);
static inline-class-member method Duplicate|(core::int instanceField, core::int instanceField) → self::Duplicate /* = core::bool */ {
  lowered final self::Duplicate /* = core::bool */ #this;
  final dynamic #t1 = invalid-expression "pkg/front_end/testcases/extension_types/representation.dart:9:31: Error: Can't use 'instanceField' because it is declared more than once.
extension type Duplicate(bool instanceField, int instanceField) {} // Error
                              ^^^^^^^^^^^^^";
  final dynamic #t2 = invalid-expression "pkg/front_end/testcases/extension_types/representation.dart:9:50: Error: Can't use 'instanceField' because it is declared more than once.
extension type Duplicate(bool instanceField, int instanceField) {} // Error
                                                 ^^^^^^^^^^^^^";
  return #this;
}
static inline-class-member method Duplicate|_#new#tearOff(core::int instanceField, core::int instanceField) → self::Duplicate /* = core::bool */
  return self::Duplicate|(instanceField, instanceField);
