library;
import self as self;
import "dart:core" as core;

typedef TA = self::A;
class A extends core::Object /*hasConstConstructor*/  {
  const constructor •() → self::A
    : super core::Object::•()
    ;
  const constructor named() → self::A
    : super core::Object::•()
    ;
  const constructor named2() → self::A
    : super core::Object::•()
    ;
  static factory redir() → self::A /* redirection-target: self::B::• */
    return new self::B::•();
  static factory redir2() → self::A /* redirection-target: self::B::• */
    return new self::B::•();
  static factory selfRedir() → self::A /* redirection-target: self::A::named */
    return new self::A::named();
  static factory selfRedir2() → self::A /* redirection-target: self::A::named2 */
    return new self::A::named2();
}
class B extends self::A /*hasConstConstructor*/  {
  const constructor •() → self::B
    : super self::A::•()
    ;
}
class Test extends core::Object {
  synthetic constructor •() → self::Test
    ;
  method test(core::int x, core::int x2, core::int x3, core::int x4) → dynamic
    ;
}
static method test(core::int x, core::int x2, core::int x3, core::int x4) → dynamic
  ;
