library;
import self as self;
import "dart:core" as core;

class Class extends core::Object {
  synthetic constructor •() → self::Class
    ;
  operator [](self::Class cls) → self::Class
    ;
  operator []=(self::Class cls, self::Class value) → void
    ;
  operator +(self::Class cls) → self::Class
    ;
  method indexGetSetForEffect(core::Map<self::Class, self::Class> map) → void
    ;
  method indexGetSetForValue(core::Map<self::Class, self::Class> map) → void
    ;
  method implicitExtensionGetSetForEffect(core::int i) → void
    ;
  method implicitExtensionGetSetForValue(core::int i) → void
    ;
  method explicitExtensionGetSetForEffect(core::int i) → void
    ;
  method explicitExtensionGetSetForValue(core::int i) → void
    ;
}
class Subclass extends self::Class {
  synthetic constructor •() → self::Subclass
    ;
  method superIndexGetSetForEffect() → void
    ;
  method superIndexGetSetForValue() → void
    ;
}
class Class2 extends core::Object {
  synthetic constructor •() → self::Class2
    ;
  operator +(self::Class2 cls) → self::Class2
    ;
  method implicitExtensionGetSetForEffect() → void
    ;
  method implicitExtensionGetSetForValue() → void
    ;
  method explicitExtensionGetSetForEffect() → void
    ;
  method explicitExtensionGetSetForValue() → void
    ;
}
extension Extension on core::int {
  operator [] = self::Extension|[];
  operator []= = self::Extension|[]=;
}
extension Extension2 on self::Class2 {
  operator [] = self::Extension2|[];
  operator []= = self::Extension2|[]=;
}
static extension-member method Extension|[](lowered final core::int #this, self::Class cls) → self::Class
  ;
static extension-member method Extension|[]=(lowered final core::int #this, self::Class cls, self::Class value) → void
  ;
static extension-member method Extension2|[](lowered final self::Class2 #this, self::Class2 cls) → self::Class2
  ;
static extension-member method Extension2|[]=(lowered final self::Class2 #this, self::Class2 cls, self::Class2 value) → void
  ;
static method main() → dynamic
  ;
