library;
import self as self;
import "dart:core" as core;
import "main_lib.dart" as mai;

import "org-dartlang-testcase:///main_lib.dart";

static method main() → void {
  function f({core::int x = #C1}) → core::int
    return x;
  new mai::Registry::•().{mai::DynamicDispatchRegistry::register}(f){(({x: core::int}) → core::int) → ({x: core::int}) → core::int};
}

library;
import self as mai;
import "dart:core" as core;

class DynamicDispatchRegistry<T extends core::Function> extends core::Object {
  synthetic constructor •() → mai::DynamicDispatchRegistry<mai::DynamicDispatchRegistry::T>
    : super core::Object::•()
    ;
  method register(covariant-by-class mai::DynamicDispatchRegistry::T function) → mai::DynamicDispatchRegistry::T
    return function;
}
class Registry extends mai::DynamicDispatchRegistry<({x: core::int}) → core::int> {
  synthetic constructor •() → mai::Registry
    : super mai::DynamicDispatchRegistry::•()
    ;
}

constants  {
  #C1 = 0
}
