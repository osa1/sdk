library;
import self as self;
import "dart:core" as core;

class C extends core::Object {
  field core::List<self::A<core::bool>> field;
  constructor named1({core::List<self::A<core::bool>> field = #C2}) → self::C
    : self::C::field = field, super core::Object::•()
    ;
  constructor named2({core::List<self::A<core::bool>> field = #C2}) → self::C
    : self::C::field = field, super core::Object::•()
    ;
}
abstract class A<X extends core::Object? = dynamic> extends core::Object {
  static factory redir1<X extends core::Object? = dynamic>(core::int x, {required core::String s}) → self::A<self::A::redir1::X%> /* redirection-target: self::B::•<self::A::redir1::X%>*/
    return new self::B::•<self::A::redir1::X%>(x, s: s);
  static factory redir2<X extends core::Object? = dynamic>(core::int x, {required core::String s}) → self::A<self::A::redir2::X%> /* redirection-target: self::B::•<self::A::redir2::X%>*/
    return new self::B::•<self::A::redir2::X%>(x, s: s);
}
class B<Y extends core::Object? = dynamic> extends core::Object implements self::A<self::B::Y%> /*hasConstConstructor*/  {
  const constructor •(core::int x, {required core::String s}) → self::B<self::B::Y%>
    : super core::Object::•()
    ;
}
static method test() → dynamic {
  self::A<core::String> foo1 = new self::B::•<core::String>(0, s: "");
  self::A<core::num> foo2 = let final core::String #t1 = "" in new self::B::•<core::num>(0, s: #t1);
}

constants  {
  #C1 = self::B<core::bool> {}
  #C2 = <self::A<core::bool>>[#C1]
}


Constructor coverage from constants:
org-dartlang-testcase:///redirecting_constructors_declaration_order_3.dart:
- B. (from org-dartlang-testcase:///redirecting_constructors_declaration_order_3.dart:17:9)
- Object. (from org-dartlang-sdk:///sdk/lib/core/object.dart)
