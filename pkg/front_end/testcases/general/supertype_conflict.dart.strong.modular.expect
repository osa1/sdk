library;
//
// Problems in library:
//
// pkg/front_end/testcases/general/supertype_conflict.dart:11:7: Error: 'D' can't implement both 'A<String>' and 'A<int>'
//  - 'A' is from 'pkg/front_end/testcases/general/supertype_conflict.dart'.
// class D implements B<String>, C<int> {} // Error
//       ^
//
// pkg/front_end/testcases/general/supertype_conflict.dart:13:7: Error: 'E' can't implement both 'A<T>' and 'A<int>'
//  - 'A' is from 'pkg/front_end/testcases/general/supertype_conflict.dart'.
// class E<T> extends B<T> implements C<int> {} // Error
//       ^
//
// pkg/front_end/testcases/general/supertype_conflict.dart:15:7: Error: 'F' can't implement both 'A<String>' and 'A<T>'
//  - 'A' is from 'pkg/front_end/testcases/general/supertype_conflict.dart'.
// class F<T> with B<String> implements C<T> {} // Error
//       ^
//
import self as self;
import "dart:core" as core;

class A<T extends core::Object? = dynamic> extends core::Object {
  synthetic constructor •() → self::A<self::A::T%>
    : super core::Object::•()
    ;
}
mixin class B<T extends core::Object? = dynamic> extends core::Object implements self::A<self::B::T%> {
  synthetic constructor •() → self::B<self::B::T%>
    : super core::Object::•()
    ;
}
class C<T extends core::Object? = dynamic> extends core::Object implements self::A<self::C::T%> {
  synthetic constructor •() → self::C<self::C::T%>
    : super core::Object::•()
    ;
}
class D extends core::Object implements self::B<core::String>, self::C<core::int> {
  synthetic constructor •() → self::D
    : super core::Object::•()
    ;
}
class E<T extends core::Object? = dynamic> extends self::B<self::E::T%> implements self::C<core::int> {
  synthetic constructor •() → self::E<self::E::T%>
    : super self::B::•()
    ;
}
abstract class _F&Object&B = core::Object with self::B<core::String> /*isAnonymousMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_F&Object&B
    : super core::Object::•()
    ;
}
class F<T extends core::Object? = dynamic> extends self::_F&Object&B implements self::C<self::F::T%> {
  synthetic constructor •() → self::F<self::F::T%>
    : super self::_F&Object&B::•()
    ;
}
