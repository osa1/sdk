library;
import self as self;
import "package:macro/data_class.dart" as dat;
import "dart:core" as core;

import "package:macro/data_class.dart";
import "dart:core" as prefix0;
import "dart:core" as prefix0;

@#C1
class Foo extends core::Object {
  final field core::int bar;
  final field core::String baz;
  const constructor /* from dart-macro+org-dartlang-test:///a/b/c/main.dart */ •({required core::int bar, required core::String baz}) → self::Foo
    : self::Foo::bar = bar, self::Foo::baz = baz, super core::Object::•()
    ;
  get /* from dart-macro+org-dartlang-test:///a/b/c/main.dart */ hashCode() → core::int {
    return this.{self::Foo::bar}{core::int}.{core::num::hashCode}{core::int}.{core::int::^}(this.{self::Foo::baz}{core::String}.{core::String::hashCode}{core::int}){(core::int) → core::int};
  }
  operator /* from dart-macro+org-dartlang-test:///a/b/c/main.dart */ ==(core::Object other) → core::bool {
    if(core::identical(this, other))
      return true;
    return other is self::Foo && this.{self::Foo::bar}{core::int} =={core::num::==}{(core::Object) → core::bool} other{self::Foo}.{self::Foo::bar}{core::int} && this.{self::Foo::baz}{core::String} =={core::String::==}{(core::Object) → core::bool} other{self::Foo}.{self::Foo::baz}{core::String};
  }
  method /* from dart-macro+org-dartlang-test:///a/b/c/main.dart */ toString() → core::String {
    return "Foo(bar=${this.{self::Foo::bar}{core::int}},baz=${this.{self::Foo::baz}{core::String}})";
  }
}

constants  {
  #C1 = dat::DataClass {}
}
