parseUnit(f)
  skipErrorTokens(f)
  listener: beginCompilationUnit(f)
  syntheticPreviousToken(f)
  parseTopLevelDeclarationImpl(, Instance of 'DirectiveContext')
    parseMetadataStar()
      listener: beginMetadataStar(f)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl()
      listener: beginTopLevelMember(f)
      isReservedKeyword(()
      parseTopLevelMethod(, null, null, , Instance of 'NoType', null, f, false)
        listener: beginTopLevelMethod(, null, null)
        listener: handleNoType()
        ensureIdentifierPotentiallyRecovered(, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(f, topLevelFunctionDeclaration)
        parseMethodTypeVar(f)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(f, f, false, MemberKind.TopLevelMethod)
          parseFormalParameters(f, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(x)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(x, MemberKind.TopLevelMethod, null, null, null)
                listener: handleNoType(()
                ensureIdentifier((, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, late)
          parseStatement({)
            parseStatementX({)
              parseExpressionStatementOrDeclaration({, null)
                parseExpressionStatementOrDeclarationAfterModifiers(var, {, late, var, null, null)
                  looksLikeLocalFunction(()
                  listener: beginMetadataStar(late)
                  listener: endMetadataStar(0)
                  listener: handleNoType(var)
                  listener: beginVariablesDeclaration((, late, var)
                  parseVariablesDeclarationRest(var, true)
                    parseOptionallyInitializedIdentifier(var)
                      ensureIdentifier(var, localVariableDeclaration)
                        reportRecoverableErrorWithToken((, Instance of 'Template<(Token) => Message>')
                          listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got '('., Try inserting an identifier before '('., {lexeme: (}], (, ()
                        rewriter()
                        listener: handleIdentifier(, localVariableDeclaration)
                      listener: beginInitializedIdentifier()
                      parseVariableInitializerOpt()
                        listener: handleNoVariableInitializer()
                      listener: endInitializedIdentifier()
                    ensureSemicolon()
                      reportRecoverableError((, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
                        listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], (, ()
                      rewriter()
                    listener: endVariablesDeclaration(1, ;)
          notEofOrValue(}, _)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                looksLikeLocalFunction(_)
                parseExpressionStatement(;)
                  parseExpression(;)
                    looksLikeOuterPatternEquals(;)
                      skipOuterPattern(;)
                        skipObjectPatternRest(_)
                    parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression(;, true, ConstantPatternContext.none)
                        parsePrimary(;, expression, ConstantPatternContext.none)
                          parseSendOrFunctionLiteral(;, expression, ConstantPatternContext.none)
                            parseSend(;, expression, ConstantPatternContext.none)
                              isNextIdentifier(;)
                              ensureIdentifier(;, expression)
                                listener: handleIdentifier(_, expression)
                              listener: handleNoTypeArguments())
                              parseArgumentsOpt(_)
                                listener: handleNoArguments())
                              listener: handleSend(_, ))
                  ensureSemicolon(_)
                    reportRecoverableError(_, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
                      listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], _, _)
                    rewriter()
                  listener: handleExpressionStatement(;)
          notEofOrValue(}, ))
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, null)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                  looksLikeLocalFunction())
                  parseExpressionStatement(;)
                    parseExpression(;)
                      looksLikeOuterPatternEquals(;)
                        skipOuterPattern(;)
                      parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression(;, true, ConstantPatternContext.none)
                          parsePrimary(;, expression, ConstantPatternContext.none)
                            parseSend(;, expression, ConstantPatternContext.none)
                              isNextIdentifier(;)
                              ensureIdentifier(;, expression)
                                reportRecoverableErrorWithToken(), Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got ')'., Try inserting an identifier before ')'., {lexeme: )}], ), ))
                                rewriter()
                                listener: handleIdentifier(, expression)
                              listener: handleNoTypeArguments())
                              parseArgumentsOpt()
                                listener: handleNoArguments())
                              listener: handleSend(, ))
                    ensureSemicolon()
                      reportRecoverableError(_, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
                        listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], _, _)
                      rewriter()
                    listener: handleExpressionStatement(;)
          reportRecoverableError(;, Message[UnexpectedToken, Unexpected token ';'., null, {lexeme: ;}])
            listener: handleRecoverableError(Message[UnexpectedToken, Unexpected token ';'., null, {lexeme: ;}], ), ))
          notEofOrValue(}, =)
          parseStatement())
            parseStatementX())
              parseExpressionStatementOrDeclaration(), null)
                parseExpressionStatementOrDeclarationAfterModifiers(), ), null, null, null, null)
                  looksLikeLocalFunction(=)
                  parseExpressionStatement())
                    parseExpression())
                      looksLikeOuterPatternEquals())
                        skipOuterPattern())
                      parsePrecedenceExpression(), 1, true, ConstantPatternContext.none)
                        parseUnaryExpression(), true, ConstantPatternContext.none)
                          parsePrimary(), expression, ConstantPatternContext.none)
                            parseSend(), expression, ConstantPatternContext.none)
                              isNextIdentifier())
                              ensureIdentifier(), expression)
                                reportRecoverableErrorWithToken(=, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got '='., Try inserting an identifier before '='., {lexeme: =}], =, =)
                                rewriter()
                                listener: handleIdentifier(, expression)
                              listener: handleNoTypeArguments(=)
                              parseArgumentsOpt()
                                listener: handleNoArguments(=)
                              listener: handleSend(, =)
                        parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=, true, ConstantPatternContext.none)
                            parsePrimary(=, expression, ConstantPatternContext.none)
                              parseSendOrFunctionLiteral(=, expression, ConstantPatternContext.none)
                                parseSend(=, expression, ConstantPatternContext.none)
                                  isNextIdentifier(=)
                                  ensureIdentifier(=, expression)
                                    listener: handleIdentifier(x, expression)
                                  listener: handleNoTypeArguments(;)
                                  parseArgumentsOpt(x)
                                    listener: handleNoArguments(;)
                                  listener: handleSend(x, ;)
                        listener: handleAssignmentExpression(=)
                    ensureSemicolon(x)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, })
          listener: endBlockFunctionBody(4, {, })
        listener: endTopLevelMethod(f, null, })
  listener: endTopLevelDeclaration()
  reportAllErrorTokens(f)
  listener: endCompilationUnit(1, )
