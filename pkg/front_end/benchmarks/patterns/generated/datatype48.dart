// Copyright (c) 2024, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

// Generated by
//
//   pkg/front_end/benchmarks/patterns/generate_datatypes.dart

import '../test_datatypes.dart';

abstract class Base48 {
  void dynamicDispatch(Counter counter);

  R accept<R, A>(Visitor48<R, A> visitor, A arg);
}

class Sub0 extends Base48 {
  @override
  void dynamicDispatch(Counter counter) {
    counter.inc();
  }

  void ifThenElseDispatch0(Counter counter) {
    counter.inc();
  }

  void visitorDispatch0(Counter counter) {
    counter.inc();
  }

  void patternDispatch0(Counter counter) {
    counter.inc();
  }

  @override
  R accept<R, A>(Visitor48<R, A> visitor, A arg) {
    return visitor.visitSub0(this, arg);
  }
}

class Sub1 extends Base48 {
  @override
  void dynamicDispatch(Counter counter) {
    counter.inc();
  }

  void ifThenElseDispatch1(Counter counter) {
    counter.inc();
  }

  void visitorDispatch1(Counter counter) {
    counter.inc();
  }

  void patternDispatch1(Counter counter) {
    counter.inc();
  }

  @override
  R accept<R, A>(Visitor48<R, A> visitor, A arg) {
    return visitor.visitSub1(this, arg);
  }
}

class Sub2 extends Base48 {
  @override
  void dynamicDispatch(Counter counter) {
    counter.inc();
  }

  void ifThenElseDispatch2(Counter counter) {
    counter.inc();
  }

  void visitorDispatch2(Counter counter) {
    counter.inc();
  }

  void patternDispatch2(Counter counter) {
    counter.inc();
  }

  @override
  R accept<R, A>(Visitor48<R, A> visitor, A arg) {
    return visitor.visitSub2(this, arg);
  }
}

class Sub3 extends Base48 {
  @override
  void dynamicDispatch(Counter counter) {
    counter.inc();
  }

  void ifThenElseDispatch3(Counter counter) {
    counter.inc();
  }

  void visitorDispatch3(Counter counter) {
    counter.inc();
  }

  void patternDispatch3(Counter counter) {
    counter.inc();
  }

  @override
  R accept<R, A>(Visitor48<R, A> visitor, A arg) {
    return visitor.visitSub3(this, arg);
  }
}

class Sub4 extends Base48 {
  @override
  void dynamicDispatch(Counter counter) {
    counter.inc();
  }

  void ifThenElseDispatch4(Counter counter) {
    counter.inc();
  }

  void visitorDispatch4(Counter counter) {
    counter.inc();
  }

  void patternDispatch4(Counter counter) {
    counter.inc();
  }

  @override
  R accept<R, A>(Visitor48<R, A> visitor, A arg) {
    return visitor.visitSub4(this, arg);
  }
}

class Sub5 extends Base48 {
  @override
  void dynamicDispatch(Counter counter) {
    counter.inc();
  }

  void ifThenElseDispatch5(Counter counter) {
    counter.inc();
  }

  void visitorDispatch5(Counter counter) {
    counter.inc();
  }

  void patternDispatch5(Counter counter) {
    counter.inc();
  }

  @override
  R accept<R, A>(Visitor48<R, A> visitor, A arg) {
    return visitor.visitSub5(this, arg);
  }
}

class Sub6 extends Base48 {
  @override
  void dynamicDispatch(Counter counter) {
    counter.inc();
  }

  void ifThenElseDispatch6(Counter counter) {
    counter.inc();
  }

  void visitorDispatch6(Counter counter) {
    counter.inc();
  }

  void patternDispatch6(Counter counter) {
    counter.inc();
  }

  @override
  R accept<R, A>(Visitor48<R, A> visitor, A arg) {
    return visitor.visitSub6(this, arg);
  }
}

class Sub7 extends Base48 {
  @override
  void dynamicDispatch(Counter counter) {
    counter.inc();
  }

  void ifThenElseDispatch7(Counter counter) {
    counter.inc();
  }

  void visitorDispatch7(Counter counter) {
    counter.inc();
  }

  void patternDispatch7(Counter counter) {
    counter.inc();
  }

  @override
  R accept<R, A>(Visitor48<R, A> visitor, A arg) {
    return visitor.visitSub7(this, arg);
  }
}

class Sub8 extends Base48 {
  @override
  void dynamicDispatch(Counter counter) {
    counter.inc();
  }

  void ifThenElseDispatch8(Counter counter) {
    counter.inc();
  }

  void visitorDispatch8(Counter counter) {
    counter.inc();
  }

  void patternDispatch8(Counter counter) {
    counter.inc();
  }

  @override
  R accept<R, A>(Visitor48<R, A> visitor, A arg) {
    return visitor.visitSub8(this, arg);
  }
}

class Sub9 extends Base48 {
  @override
  void dynamicDispatch(Counter counter) {
    counter.inc();
  }

  void ifThenElseDispatch9(Counter counter) {
    counter.inc();
  }

  void visitorDispatch9(Counter counter) {
    counter.inc();
  }

  void patternDispatch9(Counter counter) {
    counter.inc();
  }

  @override
  R accept<R, A>(Visitor48<R, A> visitor, A arg) {
    return visitor.visitSub9(this, arg);
  }
}

class Sub10 extends Base48 {
  @override
  void dynamicDispatch(Counter counter) {
    counter.inc();
  }

  void ifThenElseDispatch10(Counter counter) {
    counter.inc();
  }

  void visitorDispatch10(Counter counter) {
    counter.inc();
  }

  void patternDispatch10(Counter counter) {
    counter.inc();
  }

  @override
  R accept<R, A>(Visitor48<R, A> visitor, A arg) {
    return visitor.visitSub10(this, arg);
  }
}

class Sub11 extends Base48 {
  @override
  void dynamicDispatch(Counter counter) {
    counter.inc();
  }

  void ifThenElseDispatch11(Counter counter) {
    counter.inc();
  }

  void visitorDispatch11(Counter counter) {
    counter.inc();
  }

  void patternDispatch11(Counter counter) {
    counter.inc();
  }

  @override
  R accept<R, A>(Visitor48<R, A> visitor, A arg) {
    return visitor.visitSub11(this, arg);
  }
}

class Sub12 extends Base48 {
  @override
  void dynamicDispatch(Counter counter) {
    counter.inc();
  }

  void ifThenElseDispatch12(Counter counter) {
    counter.inc();
  }

  void visitorDispatch12(Counter counter) {
    counter.inc();
  }

  void patternDispatch12(Counter counter) {
    counter.inc();
  }

  @override
  R accept<R, A>(Visitor48<R, A> visitor, A arg) {
    return visitor.visitSub12(this, arg);
  }
}

class Sub13 extends Base48 {
  @override
  void dynamicDispatch(Counter counter) {
    counter.inc();
  }

  void ifThenElseDispatch13(Counter counter) {
    counter.inc();
  }

  void visitorDispatch13(Counter counter) {
    counter.inc();
  }

  void patternDispatch13(Counter counter) {
    counter.inc();
  }

  @override
  R accept<R, A>(Visitor48<R, A> visitor, A arg) {
    return visitor.visitSub13(this, arg);
  }
}

class Sub14 extends Base48 {
  @override
  void dynamicDispatch(Counter counter) {
    counter.inc();
  }

  void ifThenElseDispatch14(Counter counter) {
    counter.inc();
  }

  void visitorDispatch14(Counter counter) {
    counter.inc();
  }

  void patternDispatch14(Counter counter) {
    counter.inc();
  }

  @override
  R accept<R, A>(Visitor48<R, A> visitor, A arg) {
    return visitor.visitSub14(this, arg);
  }
}

class Sub15 extends Base48 {
  @override
  void dynamicDispatch(Counter counter) {
    counter.inc();
  }

  void ifThenElseDispatch15(Counter counter) {
    counter.inc();
  }

  void visitorDispatch15(Counter counter) {
    counter.inc();
  }

  void patternDispatch15(Counter counter) {
    counter.inc();
  }

  @override
  R accept<R, A>(Visitor48<R, A> visitor, A arg) {
    return visitor.visitSub15(this, arg);
  }
}

class Sub16 extends Base48 {
  @override
  void dynamicDispatch(Counter counter) {
    counter.inc();
  }

  void ifThenElseDispatch16(Counter counter) {
    counter.inc();
  }

  void visitorDispatch16(Counter counter) {
    counter.inc();
  }

  void patternDispatch16(Counter counter) {
    counter.inc();
  }

  @override
  R accept<R, A>(Visitor48<R, A> visitor, A arg) {
    return visitor.visitSub16(this, arg);
  }
}

class Sub17 extends Base48 {
  @override
  void dynamicDispatch(Counter counter) {
    counter.inc();
  }

  void ifThenElseDispatch17(Counter counter) {
    counter.inc();
  }

  void visitorDispatch17(Counter counter) {
    counter.inc();
  }

  void patternDispatch17(Counter counter) {
    counter.inc();
  }

  @override
  R accept<R, A>(Visitor48<R, A> visitor, A arg) {
    return visitor.visitSub17(this, arg);
  }
}

class Sub18 extends Base48 {
  @override
  void dynamicDispatch(Counter counter) {
    counter.inc();
  }

  void ifThenElseDispatch18(Counter counter) {
    counter.inc();
  }

  void visitorDispatch18(Counter counter) {
    counter.inc();
  }

  void patternDispatch18(Counter counter) {
    counter.inc();
  }

  @override
  R accept<R, A>(Visitor48<R, A> visitor, A arg) {
    return visitor.visitSub18(this, arg);
  }
}

class Sub19 extends Base48 {
  @override
  void dynamicDispatch(Counter counter) {
    counter.inc();
  }

  void ifThenElseDispatch19(Counter counter) {
    counter.inc();
  }

  void visitorDispatch19(Counter counter) {
    counter.inc();
  }

  void patternDispatch19(Counter counter) {
    counter.inc();
  }

  @override
  R accept<R, A>(Visitor48<R, A> visitor, A arg) {
    return visitor.visitSub19(this, arg);
  }
}

class Sub20 extends Base48 {
  @override
  void dynamicDispatch(Counter counter) {
    counter.inc();
  }

  void ifThenElseDispatch20(Counter counter) {
    counter.inc();
  }

  void visitorDispatch20(Counter counter) {
    counter.inc();
  }

  void patternDispatch20(Counter counter) {
    counter.inc();
  }

  @override
  R accept<R, A>(Visitor48<R, A> visitor, A arg) {
    return visitor.visitSub20(this, arg);
  }
}

class Sub21 extends Base48 {
  @override
  void dynamicDispatch(Counter counter) {
    counter.inc();
  }

  void ifThenElseDispatch21(Counter counter) {
    counter.inc();
  }

  void visitorDispatch21(Counter counter) {
    counter.inc();
  }

  void patternDispatch21(Counter counter) {
    counter.inc();
  }

  @override
  R accept<R, A>(Visitor48<R, A> visitor, A arg) {
    return visitor.visitSub21(this, arg);
  }
}

class Sub22 extends Base48 {
  @override
  void dynamicDispatch(Counter counter) {
    counter.inc();
  }

  void ifThenElseDispatch22(Counter counter) {
    counter.inc();
  }

  void visitorDispatch22(Counter counter) {
    counter.inc();
  }

  void patternDispatch22(Counter counter) {
    counter.inc();
  }

  @override
  R accept<R, A>(Visitor48<R, A> visitor, A arg) {
    return visitor.visitSub22(this, arg);
  }
}

class Sub23 extends Base48 {
  @override
  void dynamicDispatch(Counter counter) {
    counter.inc();
  }

  void ifThenElseDispatch23(Counter counter) {
    counter.inc();
  }

  void visitorDispatch23(Counter counter) {
    counter.inc();
  }

  void patternDispatch23(Counter counter) {
    counter.inc();
  }

  @override
  R accept<R, A>(Visitor48<R, A> visitor, A arg) {
    return visitor.visitSub23(this, arg);
  }
}

class Sub24 extends Base48 {
  @override
  void dynamicDispatch(Counter counter) {
    counter.inc();
  }

  void ifThenElseDispatch24(Counter counter) {
    counter.inc();
  }

  void visitorDispatch24(Counter counter) {
    counter.inc();
  }

  void patternDispatch24(Counter counter) {
    counter.inc();
  }

  @override
  R accept<R, A>(Visitor48<R, A> visitor, A arg) {
    return visitor.visitSub24(this, arg);
  }
}

class Sub25 extends Base48 {
  @override
  void dynamicDispatch(Counter counter) {
    counter.inc();
  }

  void ifThenElseDispatch25(Counter counter) {
    counter.inc();
  }

  void visitorDispatch25(Counter counter) {
    counter.inc();
  }

  void patternDispatch25(Counter counter) {
    counter.inc();
  }

  @override
  R accept<R, A>(Visitor48<R, A> visitor, A arg) {
    return visitor.visitSub25(this, arg);
  }
}

class Sub26 extends Base48 {
  @override
  void dynamicDispatch(Counter counter) {
    counter.inc();
  }

  void ifThenElseDispatch26(Counter counter) {
    counter.inc();
  }

  void visitorDispatch26(Counter counter) {
    counter.inc();
  }

  void patternDispatch26(Counter counter) {
    counter.inc();
  }

  @override
  R accept<R, A>(Visitor48<R, A> visitor, A arg) {
    return visitor.visitSub26(this, arg);
  }
}

class Sub27 extends Base48 {
  @override
  void dynamicDispatch(Counter counter) {
    counter.inc();
  }

  void ifThenElseDispatch27(Counter counter) {
    counter.inc();
  }

  void visitorDispatch27(Counter counter) {
    counter.inc();
  }

  void patternDispatch27(Counter counter) {
    counter.inc();
  }

  @override
  R accept<R, A>(Visitor48<R, A> visitor, A arg) {
    return visitor.visitSub27(this, arg);
  }
}

class Sub28 extends Base48 {
  @override
  void dynamicDispatch(Counter counter) {
    counter.inc();
  }

  void ifThenElseDispatch28(Counter counter) {
    counter.inc();
  }

  void visitorDispatch28(Counter counter) {
    counter.inc();
  }

  void patternDispatch28(Counter counter) {
    counter.inc();
  }

  @override
  R accept<R, A>(Visitor48<R, A> visitor, A arg) {
    return visitor.visitSub28(this, arg);
  }
}

class Sub29 extends Base48 {
  @override
  void dynamicDispatch(Counter counter) {
    counter.inc();
  }

  void ifThenElseDispatch29(Counter counter) {
    counter.inc();
  }

  void visitorDispatch29(Counter counter) {
    counter.inc();
  }

  void patternDispatch29(Counter counter) {
    counter.inc();
  }

  @override
  R accept<R, A>(Visitor48<R, A> visitor, A arg) {
    return visitor.visitSub29(this, arg);
  }
}

class Sub30 extends Base48 {
  @override
  void dynamicDispatch(Counter counter) {
    counter.inc();
  }

  void ifThenElseDispatch30(Counter counter) {
    counter.inc();
  }

  void visitorDispatch30(Counter counter) {
    counter.inc();
  }

  void patternDispatch30(Counter counter) {
    counter.inc();
  }

  @override
  R accept<R, A>(Visitor48<R, A> visitor, A arg) {
    return visitor.visitSub30(this, arg);
  }
}

class Sub31 extends Base48 {
  @override
  void dynamicDispatch(Counter counter) {
    counter.inc();
  }

  void ifThenElseDispatch31(Counter counter) {
    counter.inc();
  }

  void visitorDispatch31(Counter counter) {
    counter.inc();
  }

  void patternDispatch31(Counter counter) {
    counter.inc();
  }

  @override
  R accept<R, A>(Visitor48<R, A> visitor, A arg) {
    return visitor.visitSub31(this, arg);
  }
}

class Sub32 extends Base48 {
  @override
  void dynamicDispatch(Counter counter) {
    counter.inc();
  }

  void ifThenElseDispatch32(Counter counter) {
    counter.inc();
  }

  void visitorDispatch32(Counter counter) {
    counter.inc();
  }

  void patternDispatch32(Counter counter) {
    counter.inc();
  }

  @override
  R accept<R, A>(Visitor48<R, A> visitor, A arg) {
    return visitor.visitSub32(this, arg);
  }
}

class Sub33 extends Base48 {
  @override
  void dynamicDispatch(Counter counter) {
    counter.inc();
  }

  void ifThenElseDispatch33(Counter counter) {
    counter.inc();
  }

  void visitorDispatch33(Counter counter) {
    counter.inc();
  }

  void patternDispatch33(Counter counter) {
    counter.inc();
  }

  @override
  R accept<R, A>(Visitor48<R, A> visitor, A arg) {
    return visitor.visitSub33(this, arg);
  }
}

class Sub34 extends Base48 {
  @override
  void dynamicDispatch(Counter counter) {
    counter.inc();
  }

  void ifThenElseDispatch34(Counter counter) {
    counter.inc();
  }

  void visitorDispatch34(Counter counter) {
    counter.inc();
  }

  void patternDispatch34(Counter counter) {
    counter.inc();
  }

  @override
  R accept<R, A>(Visitor48<R, A> visitor, A arg) {
    return visitor.visitSub34(this, arg);
  }
}

class Sub35 extends Base48 {
  @override
  void dynamicDispatch(Counter counter) {
    counter.inc();
  }

  void ifThenElseDispatch35(Counter counter) {
    counter.inc();
  }

  void visitorDispatch35(Counter counter) {
    counter.inc();
  }

  void patternDispatch35(Counter counter) {
    counter.inc();
  }

  @override
  R accept<R, A>(Visitor48<R, A> visitor, A arg) {
    return visitor.visitSub35(this, arg);
  }
}

class Sub36 extends Base48 {
  @override
  void dynamicDispatch(Counter counter) {
    counter.inc();
  }

  void ifThenElseDispatch36(Counter counter) {
    counter.inc();
  }

  void visitorDispatch36(Counter counter) {
    counter.inc();
  }

  void patternDispatch36(Counter counter) {
    counter.inc();
  }

  @override
  R accept<R, A>(Visitor48<R, A> visitor, A arg) {
    return visitor.visitSub36(this, arg);
  }
}

class Sub37 extends Base48 {
  @override
  void dynamicDispatch(Counter counter) {
    counter.inc();
  }

  void ifThenElseDispatch37(Counter counter) {
    counter.inc();
  }

  void visitorDispatch37(Counter counter) {
    counter.inc();
  }

  void patternDispatch37(Counter counter) {
    counter.inc();
  }

  @override
  R accept<R, A>(Visitor48<R, A> visitor, A arg) {
    return visitor.visitSub37(this, arg);
  }
}

class Sub38 extends Base48 {
  @override
  void dynamicDispatch(Counter counter) {
    counter.inc();
  }

  void ifThenElseDispatch38(Counter counter) {
    counter.inc();
  }

  void visitorDispatch38(Counter counter) {
    counter.inc();
  }

  void patternDispatch38(Counter counter) {
    counter.inc();
  }

  @override
  R accept<R, A>(Visitor48<R, A> visitor, A arg) {
    return visitor.visitSub38(this, arg);
  }
}

class Sub39 extends Base48 {
  @override
  void dynamicDispatch(Counter counter) {
    counter.inc();
  }

  void ifThenElseDispatch39(Counter counter) {
    counter.inc();
  }

  void visitorDispatch39(Counter counter) {
    counter.inc();
  }

  void patternDispatch39(Counter counter) {
    counter.inc();
  }

  @override
  R accept<R, A>(Visitor48<R, A> visitor, A arg) {
    return visitor.visitSub39(this, arg);
  }
}

class Sub40 extends Base48 {
  @override
  void dynamicDispatch(Counter counter) {
    counter.inc();
  }

  void ifThenElseDispatch40(Counter counter) {
    counter.inc();
  }

  void visitorDispatch40(Counter counter) {
    counter.inc();
  }

  void patternDispatch40(Counter counter) {
    counter.inc();
  }

  @override
  R accept<R, A>(Visitor48<R, A> visitor, A arg) {
    return visitor.visitSub40(this, arg);
  }
}

class Sub41 extends Base48 {
  @override
  void dynamicDispatch(Counter counter) {
    counter.inc();
  }

  void ifThenElseDispatch41(Counter counter) {
    counter.inc();
  }

  void visitorDispatch41(Counter counter) {
    counter.inc();
  }

  void patternDispatch41(Counter counter) {
    counter.inc();
  }

  @override
  R accept<R, A>(Visitor48<R, A> visitor, A arg) {
    return visitor.visitSub41(this, arg);
  }
}

class Sub42 extends Base48 {
  @override
  void dynamicDispatch(Counter counter) {
    counter.inc();
  }

  void ifThenElseDispatch42(Counter counter) {
    counter.inc();
  }

  void visitorDispatch42(Counter counter) {
    counter.inc();
  }

  void patternDispatch42(Counter counter) {
    counter.inc();
  }

  @override
  R accept<R, A>(Visitor48<R, A> visitor, A arg) {
    return visitor.visitSub42(this, arg);
  }
}

class Sub43 extends Base48 {
  @override
  void dynamicDispatch(Counter counter) {
    counter.inc();
  }

  void ifThenElseDispatch43(Counter counter) {
    counter.inc();
  }

  void visitorDispatch43(Counter counter) {
    counter.inc();
  }

  void patternDispatch43(Counter counter) {
    counter.inc();
  }

  @override
  R accept<R, A>(Visitor48<R, A> visitor, A arg) {
    return visitor.visitSub43(this, arg);
  }
}

class Sub44 extends Base48 {
  @override
  void dynamicDispatch(Counter counter) {
    counter.inc();
  }

  void ifThenElseDispatch44(Counter counter) {
    counter.inc();
  }

  void visitorDispatch44(Counter counter) {
    counter.inc();
  }

  void patternDispatch44(Counter counter) {
    counter.inc();
  }

  @override
  R accept<R, A>(Visitor48<R, A> visitor, A arg) {
    return visitor.visitSub44(this, arg);
  }
}

class Sub45 extends Base48 {
  @override
  void dynamicDispatch(Counter counter) {
    counter.inc();
  }

  void ifThenElseDispatch45(Counter counter) {
    counter.inc();
  }

  void visitorDispatch45(Counter counter) {
    counter.inc();
  }

  void patternDispatch45(Counter counter) {
    counter.inc();
  }

  @override
  R accept<R, A>(Visitor48<R, A> visitor, A arg) {
    return visitor.visitSub45(this, arg);
  }
}

class Sub46 extends Base48 {
  @override
  void dynamicDispatch(Counter counter) {
    counter.inc();
  }

  void ifThenElseDispatch46(Counter counter) {
    counter.inc();
  }

  void visitorDispatch46(Counter counter) {
    counter.inc();
  }

  void patternDispatch46(Counter counter) {
    counter.inc();
  }

  @override
  R accept<R, A>(Visitor48<R, A> visitor, A arg) {
    return visitor.visitSub46(this, arg);
  }
}

class Sub47 extends Base48 {
  @override
  void dynamicDispatch(Counter counter) {
    counter.inc();
  }

  void ifThenElseDispatch47(Counter counter) {
    counter.inc();
  }

  void visitorDispatch47(Counter counter) {
    counter.inc();
  }

  void patternDispatch47(Counter counter) {
    counter.inc();
  }

  @override
  R accept<R, A>(Visitor48<R, A> visitor, A arg) {
    return visitor.visitSub47(this, arg);
  }
}

List<Base48> createData48() {
  return [
    Sub0(),
    Sub1(),
    Sub2(),
    Sub3(),
    Sub4(),
    Sub5(),
    Sub6(),
    Sub7(),
    Sub8(),
    Sub9(),
    Sub10(),
    Sub11(),
    Sub12(),
    Sub13(),
    Sub14(),
    Sub15(),
    Sub16(),
    Sub17(),
    Sub18(),
    Sub19(),
    Sub20(),
    Sub21(),
    Sub22(),
    Sub23(),
    Sub24(),
    Sub25(),
    Sub26(),
    Sub27(),
    Sub28(),
    Sub29(),
    Sub30(),
    Sub31(),
    Sub32(),
    Sub33(),
    Sub34(),
    Sub35(),
    Sub36(),
    Sub37(),
    Sub38(),
    Sub39(),
    Sub40(),
    Sub41(),
    Sub42(),
    Sub43(),
    Sub44(),
    Sub45(),
    Sub46(),
    Sub47(),
  ];
}

void incByDynamicDispatch48(Base48 base, Counter counter) {
  base.dynamicDispatch(counter);
}

void incByIfThenElseDispatch48(Base48 base, Counter counter) {
  if (base is Sub0) {
    base.ifThenElseDispatch0(counter);
  } else if (base is Sub1) {
    base.ifThenElseDispatch1(counter);
  } else if (base is Sub2) {
    base.ifThenElseDispatch2(counter);
  } else if (base is Sub3) {
    base.ifThenElseDispatch3(counter);
  } else if (base is Sub4) {
    base.ifThenElseDispatch4(counter);
  } else if (base is Sub5) {
    base.ifThenElseDispatch5(counter);
  } else if (base is Sub6) {
    base.ifThenElseDispatch6(counter);
  } else if (base is Sub7) {
    base.ifThenElseDispatch7(counter);
  } else if (base is Sub8) {
    base.ifThenElseDispatch8(counter);
  } else if (base is Sub9) {
    base.ifThenElseDispatch9(counter);
  } else if (base is Sub10) {
    base.ifThenElseDispatch10(counter);
  } else if (base is Sub11) {
    base.ifThenElseDispatch11(counter);
  } else if (base is Sub12) {
    base.ifThenElseDispatch12(counter);
  } else if (base is Sub13) {
    base.ifThenElseDispatch13(counter);
  } else if (base is Sub14) {
    base.ifThenElseDispatch14(counter);
  } else if (base is Sub15) {
    base.ifThenElseDispatch15(counter);
  } else if (base is Sub16) {
    base.ifThenElseDispatch16(counter);
  } else if (base is Sub17) {
    base.ifThenElseDispatch17(counter);
  } else if (base is Sub18) {
    base.ifThenElseDispatch18(counter);
  } else if (base is Sub19) {
    base.ifThenElseDispatch19(counter);
  } else if (base is Sub20) {
    base.ifThenElseDispatch20(counter);
  } else if (base is Sub21) {
    base.ifThenElseDispatch21(counter);
  } else if (base is Sub22) {
    base.ifThenElseDispatch22(counter);
  } else if (base is Sub23) {
    base.ifThenElseDispatch23(counter);
  } else if (base is Sub24) {
    base.ifThenElseDispatch24(counter);
  } else if (base is Sub25) {
    base.ifThenElseDispatch25(counter);
  } else if (base is Sub26) {
    base.ifThenElseDispatch26(counter);
  } else if (base is Sub27) {
    base.ifThenElseDispatch27(counter);
  } else if (base is Sub28) {
    base.ifThenElseDispatch28(counter);
  } else if (base is Sub29) {
    base.ifThenElseDispatch29(counter);
  } else if (base is Sub30) {
    base.ifThenElseDispatch30(counter);
  } else if (base is Sub31) {
    base.ifThenElseDispatch31(counter);
  } else if (base is Sub32) {
    base.ifThenElseDispatch32(counter);
  } else if (base is Sub33) {
    base.ifThenElseDispatch33(counter);
  } else if (base is Sub34) {
    base.ifThenElseDispatch34(counter);
  } else if (base is Sub35) {
    base.ifThenElseDispatch35(counter);
  } else if (base is Sub36) {
    base.ifThenElseDispatch36(counter);
  } else if (base is Sub37) {
    base.ifThenElseDispatch37(counter);
  } else if (base is Sub38) {
    base.ifThenElseDispatch38(counter);
  } else if (base is Sub39) {
    base.ifThenElseDispatch39(counter);
  } else if (base is Sub40) {
    base.ifThenElseDispatch40(counter);
  } else if (base is Sub41) {
    base.ifThenElseDispatch41(counter);
  } else if (base is Sub42) {
    base.ifThenElseDispatch42(counter);
  } else if (base is Sub43) {
    base.ifThenElseDispatch43(counter);
  } else if (base is Sub44) {
    base.ifThenElseDispatch44(counter);
  } else if (base is Sub45) {
    base.ifThenElseDispatch45(counter);
  } else if (base is Sub46) {
    base.ifThenElseDispatch46(counter);
  } else if (base is Sub47) {
    base.ifThenElseDispatch47(counter);
  }
}

const Visitor48<void, Counter> visitor = CounterVisitor48();

void incByVisitorDispatch48(Base48 base, Counter counter) {
  base.accept(visitor, counter);
}

void incByPatternDispatch48(Base48 base, Counter counter) {
  switch (base) {
    case Sub0():
      base.patternDispatch0(counter);

    case Sub1():
      base.patternDispatch1(counter);

    case Sub2():
      base.patternDispatch2(counter);

    case Sub3():
      base.patternDispatch3(counter);

    case Sub4():
      base.patternDispatch4(counter);

    case Sub5():
      base.patternDispatch5(counter);

    case Sub6():
      base.patternDispatch6(counter);

    case Sub7():
      base.patternDispatch7(counter);

    case Sub8():
      base.patternDispatch8(counter);

    case Sub9():
      base.patternDispatch9(counter);

    case Sub10():
      base.patternDispatch10(counter);

    case Sub11():
      base.patternDispatch11(counter);

    case Sub12():
      base.patternDispatch12(counter);

    case Sub13():
      base.patternDispatch13(counter);

    case Sub14():
      base.patternDispatch14(counter);

    case Sub15():
      base.patternDispatch15(counter);

    case Sub16():
      base.patternDispatch16(counter);

    case Sub17():
      base.patternDispatch17(counter);

    case Sub18():
      base.patternDispatch18(counter);

    case Sub19():
      base.patternDispatch19(counter);

    case Sub20():
      base.patternDispatch20(counter);

    case Sub21():
      base.patternDispatch21(counter);

    case Sub22():
      base.patternDispatch22(counter);

    case Sub23():
      base.patternDispatch23(counter);

    case Sub24():
      base.patternDispatch24(counter);

    case Sub25():
      base.patternDispatch25(counter);

    case Sub26():
      base.patternDispatch26(counter);

    case Sub27():
      base.patternDispatch27(counter);

    case Sub28():
      base.patternDispatch28(counter);

    case Sub29():
      base.patternDispatch29(counter);

    case Sub30():
      base.patternDispatch30(counter);

    case Sub31():
      base.patternDispatch31(counter);

    case Sub32():
      base.patternDispatch32(counter);

    case Sub33():
      base.patternDispatch33(counter);

    case Sub34():
      base.patternDispatch34(counter);

    case Sub35():
      base.patternDispatch35(counter);

    case Sub36():
      base.patternDispatch36(counter);

    case Sub37():
      base.patternDispatch37(counter);

    case Sub38():
      base.patternDispatch38(counter);

    case Sub39():
      base.patternDispatch39(counter);

    case Sub40():
      base.patternDispatch40(counter);

    case Sub41():
      base.patternDispatch41(counter);

    case Sub42():
      base.patternDispatch42(counter);

    case Sub43():
      base.patternDispatch43(counter);

    case Sub44():
      base.patternDispatch44(counter);

    case Sub45():
      base.patternDispatch45(counter);

    case Sub46():
      base.patternDispatch46(counter);

    case Sub47():
      base.patternDispatch47(counter);
  }
}

abstract class Visitor48<R, A> {
  R visitSub0(Sub0 sub, A arg);
  R visitSub1(Sub1 sub, A arg);
  R visitSub2(Sub2 sub, A arg);
  R visitSub3(Sub3 sub, A arg);
  R visitSub4(Sub4 sub, A arg);
  R visitSub5(Sub5 sub, A arg);
  R visitSub6(Sub6 sub, A arg);
  R visitSub7(Sub7 sub, A arg);
  R visitSub8(Sub8 sub, A arg);
  R visitSub9(Sub9 sub, A arg);
  R visitSub10(Sub10 sub, A arg);
  R visitSub11(Sub11 sub, A arg);
  R visitSub12(Sub12 sub, A arg);
  R visitSub13(Sub13 sub, A arg);
  R visitSub14(Sub14 sub, A arg);
  R visitSub15(Sub15 sub, A arg);
  R visitSub16(Sub16 sub, A arg);
  R visitSub17(Sub17 sub, A arg);
  R visitSub18(Sub18 sub, A arg);
  R visitSub19(Sub19 sub, A arg);
  R visitSub20(Sub20 sub, A arg);
  R visitSub21(Sub21 sub, A arg);
  R visitSub22(Sub22 sub, A arg);
  R visitSub23(Sub23 sub, A arg);
  R visitSub24(Sub24 sub, A arg);
  R visitSub25(Sub25 sub, A arg);
  R visitSub26(Sub26 sub, A arg);
  R visitSub27(Sub27 sub, A arg);
  R visitSub28(Sub28 sub, A arg);
  R visitSub29(Sub29 sub, A arg);
  R visitSub30(Sub30 sub, A arg);
  R visitSub31(Sub31 sub, A arg);
  R visitSub32(Sub32 sub, A arg);
  R visitSub33(Sub33 sub, A arg);
  R visitSub34(Sub34 sub, A arg);
  R visitSub35(Sub35 sub, A arg);
  R visitSub36(Sub36 sub, A arg);
  R visitSub37(Sub37 sub, A arg);
  R visitSub38(Sub38 sub, A arg);
  R visitSub39(Sub39 sub, A arg);
  R visitSub40(Sub40 sub, A arg);
  R visitSub41(Sub41 sub, A arg);
  R visitSub42(Sub42 sub, A arg);
  R visitSub43(Sub43 sub, A arg);
  R visitSub44(Sub44 sub, A arg);
  R visitSub45(Sub45 sub, A arg);
  R visitSub46(Sub46 sub, A arg);
  R visitSub47(Sub47 sub, A arg);
}

class CounterVisitor48 implements Visitor48<void, Counter> {
  const CounterVisitor48();

  @override
  void visitSub0(Sub0 sub, Counter counter) {
    sub.visitorDispatch0(counter);
  }

  @override
  void visitSub1(Sub1 sub, Counter counter) {
    sub.visitorDispatch1(counter);
  }

  @override
  void visitSub2(Sub2 sub, Counter counter) {
    sub.visitorDispatch2(counter);
  }

  @override
  void visitSub3(Sub3 sub, Counter counter) {
    sub.visitorDispatch3(counter);
  }

  @override
  void visitSub4(Sub4 sub, Counter counter) {
    sub.visitorDispatch4(counter);
  }

  @override
  void visitSub5(Sub5 sub, Counter counter) {
    sub.visitorDispatch5(counter);
  }

  @override
  void visitSub6(Sub6 sub, Counter counter) {
    sub.visitorDispatch6(counter);
  }

  @override
  void visitSub7(Sub7 sub, Counter counter) {
    sub.visitorDispatch7(counter);
  }

  @override
  void visitSub8(Sub8 sub, Counter counter) {
    sub.visitorDispatch8(counter);
  }

  @override
  void visitSub9(Sub9 sub, Counter counter) {
    sub.visitorDispatch9(counter);
  }

  @override
  void visitSub10(Sub10 sub, Counter counter) {
    sub.visitorDispatch10(counter);
  }

  @override
  void visitSub11(Sub11 sub, Counter counter) {
    sub.visitorDispatch11(counter);
  }

  @override
  void visitSub12(Sub12 sub, Counter counter) {
    sub.visitorDispatch12(counter);
  }

  @override
  void visitSub13(Sub13 sub, Counter counter) {
    sub.visitorDispatch13(counter);
  }

  @override
  void visitSub14(Sub14 sub, Counter counter) {
    sub.visitorDispatch14(counter);
  }

  @override
  void visitSub15(Sub15 sub, Counter counter) {
    sub.visitorDispatch15(counter);
  }

  @override
  void visitSub16(Sub16 sub, Counter counter) {
    sub.visitorDispatch16(counter);
  }

  @override
  void visitSub17(Sub17 sub, Counter counter) {
    sub.visitorDispatch17(counter);
  }

  @override
  void visitSub18(Sub18 sub, Counter counter) {
    sub.visitorDispatch18(counter);
  }

  @override
  void visitSub19(Sub19 sub, Counter counter) {
    sub.visitorDispatch19(counter);
  }

  @override
  void visitSub20(Sub20 sub, Counter counter) {
    sub.visitorDispatch20(counter);
  }

  @override
  void visitSub21(Sub21 sub, Counter counter) {
    sub.visitorDispatch21(counter);
  }

  @override
  void visitSub22(Sub22 sub, Counter counter) {
    sub.visitorDispatch22(counter);
  }

  @override
  void visitSub23(Sub23 sub, Counter counter) {
    sub.visitorDispatch23(counter);
  }

  @override
  void visitSub24(Sub24 sub, Counter counter) {
    sub.visitorDispatch24(counter);
  }

  @override
  void visitSub25(Sub25 sub, Counter counter) {
    sub.visitorDispatch25(counter);
  }

  @override
  void visitSub26(Sub26 sub, Counter counter) {
    sub.visitorDispatch26(counter);
  }

  @override
  void visitSub27(Sub27 sub, Counter counter) {
    sub.visitorDispatch27(counter);
  }

  @override
  void visitSub28(Sub28 sub, Counter counter) {
    sub.visitorDispatch28(counter);
  }

  @override
  void visitSub29(Sub29 sub, Counter counter) {
    sub.visitorDispatch29(counter);
  }

  @override
  void visitSub30(Sub30 sub, Counter counter) {
    sub.visitorDispatch30(counter);
  }

  @override
  void visitSub31(Sub31 sub, Counter counter) {
    sub.visitorDispatch31(counter);
  }

  @override
  void visitSub32(Sub32 sub, Counter counter) {
    sub.visitorDispatch32(counter);
  }

  @override
  void visitSub33(Sub33 sub, Counter counter) {
    sub.visitorDispatch33(counter);
  }

  @override
  void visitSub34(Sub34 sub, Counter counter) {
    sub.visitorDispatch34(counter);
  }

  @override
  void visitSub35(Sub35 sub, Counter counter) {
    sub.visitorDispatch35(counter);
  }

  @override
  void visitSub36(Sub36 sub, Counter counter) {
    sub.visitorDispatch36(counter);
  }

  @override
  void visitSub37(Sub37 sub, Counter counter) {
    sub.visitorDispatch37(counter);
  }

  @override
  void visitSub38(Sub38 sub, Counter counter) {
    sub.visitorDispatch38(counter);
  }

  @override
  void visitSub39(Sub39 sub, Counter counter) {
    sub.visitorDispatch39(counter);
  }

  @override
  void visitSub40(Sub40 sub, Counter counter) {
    sub.visitorDispatch40(counter);
  }

  @override
  void visitSub41(Sub41 sub, Counter counter) {
    sub.visitorDispatch41(counter);
  }

  @override
  void visitSub42(Sub42 sub, Counter counter) {
    sub.visitorDispatch42(counter);
  }

  @override
  void visitSub43(Sub43 sub, Counter counter) {
    sub.visitorDispatch43(counter);
  }

  @override
  void visitSub44(Sub44 sub, Counter counter) {
    sub.visitorDispatch44(counter);
  }

  @override
  void visitSub45(Sub45 sub, Counter counter) {
    sub.visitorDispatch45(counter);
  }

  @override
  void visitSub46(Sub46 sub, Counter counter) {
    sub.visitorDispatch46(counter);
  }

  @override
  void visitSub47(Sub47 sub, Counter counter) {
    sub.visitorDispatch47(counter);
  }
}
